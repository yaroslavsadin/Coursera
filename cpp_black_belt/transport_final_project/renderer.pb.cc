// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: renderer.proto

#include "renderer.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

extern PROTOBUF_INTERNAL_EXPORT_renderer_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Point_renderer_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_renderer_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Rgb_renderer_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_renderer_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Rgba_renderer_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_renderer_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_StopsCompressed_renderer_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_renderer_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_Color_renderer_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_renderer_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_RenderSettings_renderer_2eproto;
namespace ProtoTransport {
class PointDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Point> _instance;
} _Point_default_instance_;
class RgbDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Rgb> _instance;
} _Rgb_default_instance_;
class RgbaDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Rgba> _instance;
} _Rgba_default_instance_;
class ColorDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Color> _instance;
  ::google::protobuf::internal::ArenaStringPtr as_string_;
  const ::ProtoTransport::Rgb* as_rgb_;
  const ::ProtoTransport::Rgba* as_rgba_;
} _Color_default_instance_;
class RenderSettingsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RenderSettings> _instance;
} _RenderSettings_default_instance_;
class StopsCompressedDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<StopsCompressed> _instance;
} _StopsCompressed_default_instance_;
class RendererDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Renderer> _instance;
} _Renderer_default_instance_;
}  // namespace ProtoTransport
static void InitDefaultsPoint_renderer_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ProtoTransport::_Point_default_instance_;
    new (ptr) ::ProtoTransport::Point();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ProtoTransport::Point::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Point_renderer_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsPoint_renderer_2eproto}, {}};

static void InitDefaultsRgb_renderer_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ProtoTransport::_Rgb_default_instance_;
    new (ptr) ::ProtoTransport::Rgb();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ProtoTransport::Rgb::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Rgb_renderer_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsRgb_renderer_2eproto}, {}};

static void InitDefaultsRgba_renderer_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ProtoTransport::_Rgba_default_instance_;
    new (ptr) ::ProtoTransport::Rgba();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ProtoTransport::Rgba::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Rgba_renderer_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsRgba_renderer_2eproto}, {}};

static void InitDefaultsColor_renderer_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ProtoTransport::_Color_default_instance_;
    new (ptr) ::ProtoTransport::Color();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ProtoTransport::Color::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_Color_renderer_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsColor_renderer_2eproto}, {
      &scc_info_Rgb_renderer_2eproto.base,
      &scc_info_Rgba_renderer_2eproto.base,}};

static void InitDefaultsRenderSettings_renderer_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ProtoTransport::_RenderSettings_default_instance_;
    new (ptr) ::ProtoTransport::RenderSettings();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ProtoTransport::RenderSettings::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_RenderSettings_renderer_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsRenderSettings_renderer_2eproto}, {
      &scc_info_Point_renderer_2eproto.base,
      &scc_info_Color_renderer_2eproto.base,}};

static void InitDefaultsStopsCompressed_renderer_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ProtoTransport::_StopsCompressed_default_instance_;
    new (ptr) ::ProtoTransport::StopsCompressed();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ProtoTransport::StopsCompressed::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_StopsCompressed_renderer_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsStopsCompressed_renderer_2eproto}, {}};

static void InitDefaultsRenderer_renderer_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ProtoTransport::_Renderer_default_instance_;
    new (ptr) ::ProtoTransport::Renderer();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ProtoTransport::Renderer::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_Renderer_renderer_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsRenderer_renderer_2eproto}, {
      &scc_info_StopsCompressed_renderer_2eproto.base,
      &scc_info_RenderSettings_renderer_2eproto.base,}};

void InitDefaults_renderer_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_Point_renderer_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Rgb_renderer_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Rgba_renderer_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Color_renderer_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RenderSettings_renderer_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_StopsCompressed_renderer_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Renderer_renderer_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_renderer_2eproto[7];
constexpr ::google::protobuf::EnumDescriptor const** file_level_enum_descriptors_renderer_2eproto = nullptr;
constexpr ::google::protobuf::ServiceDescriptor const** file_level_service_descriptors_renderer_2eproto = nullptr;

const ::google::protobuf::uint32 TableStruct_renderer_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ProtoTransport::Point, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ProtoTransport::Point, x_),
  PROTOBUF_FIELD_OFFSET(::ProtoTransport::Point, y_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ProtoTransport::Rgb, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ProtoTransport::Rgb, red_),
  PROTOBUF_FIELD_OFFSET(::ProtoTransport::Rgb, green_),
  PROTOBUF_FIELD_OFFSET(::ProtoTransport::Rgb, blue_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ProtoTransport::Rgba, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ProtoTransport::Rgba, red_),
  PROTOBUF_FIELD_OFFSET(::ProtoTransport::Rgba, green_),
  PROTOBUF_FIELD_OFFSET(::ProtoTransport::Rgba, blue_),
  PROTOBUF_FIELD_OFFSET(::ProtoTransport::Rgba, alpha_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ProtoTransport::Color, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::ProtoTransport::Color, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::ProtoTransport::ColorDefaultTypeInternal, as_string_),
  offsetof(::ProtoTransport::ColorDefaultTypeInternal, as_rgb_),
  offsetof(::ProtoTransport::ColorDefaultTypeInternal, as_rgba_),
  PROTOBUF_FIELD_OFFSET(::ProtoTransport::Color, color_variant_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ProtoTransport::RenderSettings, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ProtoTransport::RenderSettings, width_),
  PROTOBUF_FIELD_OFFSET(::ProtoTransport::RenderSettings, height_),
  PROTOBUF_FIELD_OFFSET(::ProtoTransport::RenderSettings, padding_),
  PROTOBUF_FIELD_OFFSET(::ProtoTransport::RenderSettings, stop_radius_),
  PROTOBUF_FIELD_OFFSET(::ProtoTransport::RenderSettings, line_width_),
  PROTOBUF_FIELD_OFFSET(::ProtoTransport::RenderSettings, stop_label_font_size_),
  PROTOBUF_FIELD_OFFSET(::ProtoTransport::RenderSettings, stop_label_offset_),
  PROTOBUF_FIELD_OFFSET(::ProtoTransport::RenderSettings, underlayer_color_),
  PROTOBUF_FIELD_OFFSET(::ProtoTransport::RenderSettings, underlayer_width_),
  PROTOBUF_FIELD_OFFSET(::ProtoTransport::RenderSettings, bus_label_font_size_),
  PROTOBUF_FIELD_OFFSET(::ProtoTransport::RenderSettings, bus_label_offset_),
  PROTOBUF_FIELD_OFFSET(::ProtoTransport::RenderSettings, color_palette_),
  PROTOBUF_FIELD_OFFSET(::ProtoTransport::RenderSettings, layers_),
  PROTOBUF_FIELD_OFFSET(::ProtoTransport::RenderSettings, outer_margin_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ProtoTransport::StopsCompressed, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ProtoTransport::StopsCompressed, name_),
  PROTOBUF_FIELD_OFFSET(::ProtoTransport::StopsCompressed, lat_),
  PROTOBUF_FIELD_OFFSET(::ProtoTransport::StopsCompressed, lon_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ProtoTransport::Renderer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ProtoTransport::Renderer, stops_),
  PROTOBUF_FIELD_OFFSET(::ProtoTransport::Renderer, settings_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::ProtoTransport::Point)},
  { 7, -1, sizeof(::ProtoTransport::Rgb)},
  { 15, -1, sizeof(::ProtoTransport::Rgba)},
  { 24, -1, sizeof(::ProtoTransport::Color)},
  { 33, -1, sizeof(::ProtoTransport::RenderSettings)},
  { 52, -1, sizeof(::ProtoTransport::StopsCompressed)},
  { 60, -1, sizeof(::ProtoTransport::Renderer)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::ProtoTransport::_Point_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ProtoTransport::_Rgb_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ProtoTransport::_Rgba_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ProtoTransport::_Color_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ProtoTransport::_RenderSettings_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ProtoTransport::_StopsCompressed_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ProtoTransport::_Renderer_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_renderer_2eproto = {
  {}, AddDescriptors_renderer_2eproto, "renderer.proto", schemas,
  file_default_instances, TableStruct_renderer_2eproto::offsets,
  file_level_metadata_renderer_2eproto, 7, file_level_enum_descriptors_renderer_2eproto, file_level_service_descriptors_renderer_2eproto,
};

const char descriptor_table_protodef_renderer_2eproto[] =
  "\n\016renderer.proto\022\016ProtoTransport\"\035\n\005Poin"
  "t\022\t\n\001x\030\001 \001(\001\022\t\n\001y\030\002 \001(\001\"/\n\003Rgb\022\013\n\003red\030\001 "
  "\001(\r\022\r\n\005green\030\002 \001(\r\022\014\n\004blue\030\003 \001(\r\"\?\n\004Rgba"
  "\022\013\n\003red\030\001 \001(\r\022\r\n\005green\030\002 \001(\r\022\014\n\004blue\030\003 \001"
  "(\r\022\r\n\005alpha\030\004 \001(\001\"}\n\005Color\022\023\n\tas_string\030"
  "\001 \001(\tH\000\022%\n\006as_rgb\030\002 \001(\0132\023.ProtoTransport"
  ".RgbH\000\022\'\n\007as_rgba\030\003 \001(\0132\024.ProtoTransport"
  ".RgbaH\000B\017\n\rcolor_variant\"\246\003\n\016RenderSetti"
  "ngs\022\r\n\005width\030\001 \001(\001\022\016\n\006height\030\002 \001(\001\022\017\n\007pa"
  "dding\030\003 \001(\001\022\023\n\013stop_radius\030\004 \001(\001\022\022\n\nline"
  "_width\030\005 \001(\001\022\034\n\024stop_label_font_size\030\006 \001"
  "(\005\0220\n\021stop_label_offset\030\007 \001(\0132\025.ProtoTra"
  "nsport.Point\022/\n\020underlayer_color\030\010 \001(\0132\025"
  ".ProtoTransport.Color\022\030\n\020underlayer_widt"
  "h\030\t \001(\001\022\033\n\023bus_label_font_size\030\n \001(\005\022/\n\020"
  "bus_label_offset\030\013 \001(\0132\025.ProtoTransport."
  "Point\022,\n\rcolor_palette\030\014 \003(\0132\025.ProtoTran"
  "sport.Color\022\016\n\006layers\030\r \003(\t\022\024\n\014outer_mar"
  "gin\030\016 \001(\001\"9\n\017StopsCompressed\022\014\n\004name\030\001 \001"
  "(\t\022\013\n\003lat\030\002 \001(\001\022\013\n\003lon\030\003 \001(\001\"l\n\010Renderer"
  "\022.\n\005stops\030\001 \003(\0132\037.ProtoTransport.StopsCo"
  "mpressed\0220\n\010settings\030\002 \001(\0132\036.ProtoTransp"
  "ort.RenderSettingsb\006proto3"
  ;
::google::protobuf::internal::DescriptorTable descriptor_table_renderer_2eproto = {
  false, InitDefaults_renderer_2eproto, 
  descriptor_table_protodef_renderer_2eproto,
  "renderer.proto", &assign_descriptors_table_renderer_2eproto, 906,
};

void AddDescriptors_renderer_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[1] =
  {
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_renderer_2eproto, deps, 0);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_renderer_2eproto = []() { AddDescriptors_renderer_2eproto(); return true; }();
namespace ProtoTransport {

// ===================================================================

void Point::InitAsDefaultInstance() {
}
class Point::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Point::kXFieldNumber;
const int Point::kYFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Point::Point()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoTransport.Point)
}
Point::Point(const Point& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&x_)) + sizeof(y_));
  // @@protoc_insertion_point(copy_constructor:ProtoTransport.Point)
}

void Point::SharedCtor() {
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&y_) -
      reinterpret_cast<char*>(&x_)) + sizeof(y_));
}

Point::~Point() {
  // @@protoc_insertion_point(destructor:ProtoTransport.Point)
  SharedDtor();
}

void Point::SharedDtor() {
}

void Point::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Point& Point::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Point_renderer_2eproto.base);
  return *internal_default_instance();
}


void Point::Clear() {
// @@protoc_insertion_point(message_clear_start:ProtoTransport.Point)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&y_) -
      reinterpret_cast<char*>(&x_)) + sizeof(y_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Point::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Point*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // double x = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 9) goto handle_unusual;
        msg->set_x(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // double y = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 17) goto handle_unusual;
        msg->set_y(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Point::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoTransport.Point)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double x = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (9 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double y = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (17 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoTransport.Point)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoTransport.Point)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Point::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoTransport.Point)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double x = 1;
  if (this->x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->x(), output);
  }

  // double y = 2;
  if (this->y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->y(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoTransport.Point)
}

::google::protobuf::uint8* Point::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoTransport.Point)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double x = 1;
  if (this->x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->x(), target);
  }

  // double y = 2;
  if (this->y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->y(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoTransport.Point)
  return target;
}

size_t Point::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ProtoTransport.Point)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double x = 1;
  if (this->x() != 0) {
    total_size += 1 + 8;
  }

  // double y = 2;
  if (this->y() != 0) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Point::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ProtoTransport.Point)
  GOOGLE_DCHECK_NE(&from, this);
  const Point* source =
      ::google::protobuf::DynamicCastToGenerated<Point>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ProtoTransport.Point)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ProtoTransport.Point)
    MergeFrom(*source);
  }
}

void Point::MergeFrom(const Point& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ProtoTransport.Point)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.x() != 0) {
    set_x(from.x());
  }
  if (from.y() != 0) {
    set_y(from.y());
  }
}

void Point::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ProtoTransport.Point)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Point::CopyFrom(const Point& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ProtoTransport.Point)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Point::IsInitialized() const {
  return true;
}

void Point::Swap(Point* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Point::InternalSwap(Point* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(x_, other->x_);
  swap(y_, other->y_);
}

::google::protobuf::Metadata Point::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_renderer_2eproto);
  return ::file_level_metadata_renderer_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Rgb::InitAsDefaultInstance() {
}
class Rgb::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Rgb::kRedFieldNumber;
const int Rgb::kGreenFieldNumber;
const int Rgb::kBlueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Rgb::Rgb()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoTransport.Rgb)
}
Rgb::Rgb(const Rgb& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&red_, &from.red_,
    static_cast<size_t>(reinterpret_cast<char*>(&blue_) -
    reinterpret_cast<char*>(&red_)) + sizeof(blue_));
  // @@protoc_insertion_point(copy_constructor:ProtoTransport.Rgb)
}

void Rgb::SharedCtor() {
  ::memset(&red_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&blue_) -
      reinterpret_cast<char*>(&red_)) + sizeof(blue_));
}

Rgb::~Rgb() {
  // @@protoc_insertion_point(destructor:ProtoTransport.Rgb)
  SharedDtor();
}

void Rgb::SharedDtor() {
}

void Rgb::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Rgb& Rgb::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Rgb_renderer_2eproto.base);
  return *internal_default_instance();
}


void Rgb::Clear() {
// @@protoc_insertion_point(message_clear_start:ProtoTransport.Rgb)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&red_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&blue_) -
      reinterpret_cast<char*>(&red_)) + sizeof(blue_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Rgb::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Rgb*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // uint32 red = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_red(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // uint32 green = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_green(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // uint32 blue = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_blue(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Rgb::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoTransport.Rgb)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 red = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &red_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 green = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &green_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 blue = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &blue_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoTransport.Rgb)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoTransport.Rgb)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Rgb::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoTransport.Rgb)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 red = 1;
  if (this->red() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->red(), output);
  }

  // uint32 green = 2;
  if (this->green() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->green(), output);
  }

  // uint32 blue = 3;
  if (this->blue() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->blue(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoTransport.Rgb)
}

::google::protobuf::uint8* Rgb::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoTransport.Rgb)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 red = 1;
  if (this->red() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->red(), target);
  }

  // uint32 green = 2;
  if (this->green() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->green(), target);
  }

  // uint32 blue = 3;
  if (this->blue() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->blue(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoTransport.Rgb)
  return target;
}

size_t Rgb::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ProtoTransport.Rgb)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 red = 1;
  if (this->red() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->red());
  }

  // uint32 green = 2;
  if (this->green() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->green());
  }

  // uint32 blue = 3;
  if (this->blue() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->blue());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Rgb::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ProtoTransport.Rgb)
  GOOGLE_DCHECK_NE(&from, this);
  const Rgb* source =
      ::google::protobuf::DynamicCastToGenerated<Rgb>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ProtoTransport.Rgb)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ProtoTransport.Rgb)
    MergeFrom(*source);
  }
}

void Rgb::MergeFrom(const Rgb& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ProtoTransport.Rgb)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.red() != 0) {
    set_red(from.red());
  }
  if (from.green() != 0) {
    set_green(from.green());
  }
  if (from.blue() != 0) {
    set_blue(from.blue());
  }
}

void Rgb::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ProtoTransport.Rgb)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Rgb::CopyFrom(const Rgb& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ProtoTransport.Rgb)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Rgb::IsInitialized() const {
  return true;
}

void Rgb::Swap(Rgb* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Rgb::InternalSwap(Rgb* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(red_, other->red_);
  swap(green_, other->green_);
  swap(blue_, other->blue_);
}

::google::protobuf::Metadata Rgb::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_renderer_2eproto);
  return ::file_level_metadata_renderer_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Rgba::InitAsDefaultInstance() {
}
class Rgba::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Rgba::kRedFieldNumber;
const int Rgba::kGreenFieldNumber;
const int Rgba::kBlueFieldNumber;
const int Rgba::kAlphaFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Rgba::Rgba()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoTransport.Rgba)
}
Rgba::Rgba(const Rgba& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&red_, &from.red_,
    static_cast<size_t>(reinterpret_cast<char*>(&blue_) -
    reinterpret_cast<char*>(&red_)) + sizeof(blue_));
  // @@protoc_insertion_point(copy_constructor:ProtoTransport.Rgba)
}

void Rgba::SharedCtor() {
  ::memset(&red_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&blue_) -
      reinterpret_cast<char*>(&red_)) + sizeof(blue_));
}

Rgba::~Rgba() {
  // @@protoc_insertion_point(destructor:ProtoTransport.Rgba)
  SharedDtor();
}

void Rgba::SharedDtor() {
}

void Rgba::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Rgba& Rgba::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Rgba_renderer_2eproto.base);
  return *internal_default_instance();
}


void Rgba::Clear() {
// @@protoc_insertion_point(message_clear_start:ProtoTransport.Rgba)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&red_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&blue_) -
      reinterpret_cast<char*>(&red_)) + sizeof(blue_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Rgba::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Rgba*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // uint32 red = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_red(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // uint32 green = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_green(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // uint32 blue = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_blue(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // double alpha = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 33) goto handle_unusual;
        msg->set_alpha(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Rgba::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoTransport.Rgba)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 red = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &red_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 green = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &green_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 blue = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &blue_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double alpha = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (33 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &alpha_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoTransport.Rgba)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoTransport.Rgba)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Rgba::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoTransport.Rgba)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 red = 1;
  if (this->red() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->red(), output);
  }

  // uint32 green = 2;
  if (this->green() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->green(), output);
  }

  // uint32 blue = 3;
  if (this->blue() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->blue(), output);
  }

  // double alpha = 4;
  if (this->alpha() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->alpha(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoTransport.Rgba)
}

::google::protobuf::uint8* Rgba::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoTransport.Rgba)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 red = 1;
  if (this->red() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->red(), target);
  }

  // uint32 green = 2;
  if (this->green() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->green(), target);
  }

  // uint32 blue = 3;
  if (this->blue() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->blue(), target);
  }

  // double alpha = 4;
  if (this->alpha() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->alpha(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoTransport.Rgba)
  return target;
}

size_t Rgba::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ProtoTransport.Rgba)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 red = 1;
  if (this->red() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->red());
  }

  // uint32 green = 2;
  if (this->green() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->green());
  }

  // double alpha = 4;
  if (this->alpha() != 0) {
    total_size += 1 + 8;
  }

  // uint32 blue = 3;
  if (this->blue() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->blue());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Rgba::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ProtoTransport.Rgba)
  GOOGLE_DCHECK_NE(&from, this);
  const Rgba* source =
      ::google::protobuf::DynamicCastToGenerated<Rgba>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ProtoTransport.Rgba)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ProtoTransport.Rgba)
    MergeFrom(*source);
  }
}

void Rgba::MergeFrom(const Rgba& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ProtoTransport.Rgba)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.red() != 0) {
    set_red(from.red());
  }
  if (from.green() != 0) {
    set_green(from.green());
  }
  if (from.alpha() != 0) {
    set_alpha(from.alpha());
  }
  if (from.blue() != 0) {
    set_blue(from.blue());
  }
}

void Rgba::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ProtoTransport.Rgba)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Rgba::CopyFrom(const Rgba& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ProtoTransport.Rgba)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Rgba::IsInitialized() const {
  return true;
}

void Rgba::Swap(Rgba* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Rgba::InternalSwap(Rgba* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(red_, other->red_);
  swap(green_, other->green_);
  swap(alpha_, other->alpha_);
  swap(blue_, other->blue_);
}

::google::protobuf::Metadata Rgba::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_renderer_2eproto);
  return ::file_level_metadata_renderer_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Color::InitAsDefaultInstance() {
  ::ProtoTransport::_Color_default_instance_.as_string_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::ProtoTransport::_Color_default_instance_.as_rgb_ = const_cast< ::ProtoTransport::Rgb*>(
      ::ProtoTransport::Rgb::internal_default_instance());
  ::ProtoTransport::_Color_default_instance_.as_rgba_ = const_cast< ::ProtoTransport::Rgba*>(
      ::ProtoTransport::Rgba::internal_default_instance());
}
class Color::HasBitSetters {
 public:
  static const ::ProtoTransport::Rgb& as_rgb(const Color* msg);
  static const ::ProtoTransport::Rgba& as_rgba(const Color* msg);
};

const ::ProtoTransport::Rgb&
Color::HasBitSetters::as_rgb(const Color* msg) {
  return *msg->color_variant_.as_rgb_;
}
const ::ProtoTransport::Rgba&
Color::HasBitSetters::as_rgba(const Color* msg) {
  return *msg->color_variant_.as_rgba_;
}
void Color::set_allocated_as_rgb(::ProtoTransport::Rgb* as_rgb) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_color_variant();
  if (as_rgb) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      as_rgb = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, as_rgb, submessage_arena);
    }
    set_has_as_rgb();
    color_variant_.as_rgb_ = as_rgb;
  }
  // @@protoc_insertion_point(field_set_allocated:ProtoTransport.Color.as_rgb)
}
void Color::set_allocated_as_rgba(::ProtoTransport::Rgba* as_rgba) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_color_variant();
  if (as_rgba) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      as_rgba = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, as_rgba, submessage_arena);
    }
    set_has_as_rgba();
    color_variant_.as_rgba_ = as_rgba;
  }
  // @@protoc_insertion_point(field_set_allocated:ProtoTransport.Color.as_rgba)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Color::kAsStringFieldNumber;
const int Color::kAsRgbFieldNumber;
const int Color::kAsRgbaFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Color::Color()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoTransport.Color)
}
Color::Color(const Color& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_color_variant();
  switch (from.color_variant_case()) {
    case kAsString: {
      set_as_string(from.as_string());
      break;
    }
    case kAsRgb: {
      mutable_as_rgb()->::ProtoTransport::Rgb::MergeFrom(from.as_rgb());
      break;
    }
    case kAsRgba: {
      mutable_as_rgba()->::ProtoTransport::Rgba::MergeFrom(from.as_rgba());
      break;
    }
    case COLOR_VARIANT_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:ProtoTransport.Color)
}

void Color::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Color_renderer_2eproto.base);
  clear_has_color_variant();
}

Color::~Color() {
  // @@protoc_insertion_point(destructor:ProtoTransport.Color)
  SharedDtor();
}

void Color::SharedDtor() {
  if (has_color_variant()) {
    clear_color_variant();
  }
}

void Color::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Color& Color::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Color_renderer_2eproto.base);
  return *internal_default_instance();
}


void Color::clear_color_variant() {
// @@protoc_insertion_point(one_of_clear_start:ProtoTransport.Color)
  switch (color_variant_case()) {
    case kAsString: {
      color_variant_.as_string_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case kAsRgb: {
      delete color_variant_.as_rgb_;
      break;
    }
    case kAsRgba: {
      delete color_variant_.as_rgba_;
      break;
    }
    case COLOR_VARIANT_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = COLOR_VARIANT_NOT_SET;
}


void Color::Clear() {
// @@protoc_insertion_point(message_clear_start:ProtoTransport.Color)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_color_variant();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Color::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Color*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string as_string = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("ProtoTransport.Color.as_string");
        object = msg->mutable_as_string();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .ProtoTransport.Rgb as_rgb = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::ProtoTransport::Rgb::_InternalParse;
        object = msg->mutable_as_rgb();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .ProtoTransport.Rgba as_rgba = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::ProtoTransport::Rgba::_InternalParse;
        object = msg->mutable_as_rgba();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Color::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoTransport.Color)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string as_string = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_as_string()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->as_string().data(), static_cast<int>(this->as_string().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ProtoTransport.Color.as_string"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ProtoTransport.Rgb as_rgb = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_as_rgb()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ProtoTransport.Rgba as_rgba = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_as_rgba()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoTransport.Color)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoTransport.Color)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Color::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoTransport.Color)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string as_string = 1;
  if (has_as_string()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->as_string().data(), static_cast<int>(this->as_string().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ProtoTransport.Color.as_string");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->as_string(), output);
  }

  // .ProtoTransport.Rgb as_rgb = 2;
  if (has_as_rgb()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::as_rgb(this), output);
  }

  // .ProtoTransport.Rgba as_rgba = 3;
  if (has_as_rgba()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::as_rgba(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoTransport.Color)
}

::google::protobuf::uint8* Color::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoTransport.Color)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string as_string = 1;
  if (has_as_string()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->as_string().data(), static_cast<int>(this->as_string().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ProtoTransport.Color.as_string");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->as_string(), target);
  }

  // .ProtoTransport.Rgb as_rgb = 2;
  if (has_as_rgb()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::as_rgb(this), target);
  }

  // .ProtoTransport.Rgba as_rgba = 3;
  if (has_as_rgba()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::as_rgba(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoTransport.Color)
  return target;
}

size_t Color::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ProtoTransport.Color)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (color_variant_case()) {
    // string as_string = 1;
    case kAsString: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->as_string());
      break;
    }
    // .ProtoTransport.Rgb as_rgb = 2;
    case kAsRgb: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *color_variant_.as_rgb_);
      break;
    }
    // .ProtoTransport.Rgba as_rgba = 3;
    case kAsRgba: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *color_variant_.as_rgba_);
      break;
    }
    case COLOR_VARIANT_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Color::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ProtoTransport.Color)
  GOOGLE_DCHECK_NE(&from, this);
  const Color* source =
      ::google::protobuf::DynamicCastToGenerated<Color>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ProtoTransport.Color)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ProtoTransport.Color)
    MergeFrom(*source);
  }
}

void Color::MergeFrom(const Color& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ProtoTransport.Color)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.color_variant_case()) {
    case kAsString: {
      set_as_string(from.as_string());
      break;
    }
    case kAsRgb: {
      mutable_as_rgb()->::ProtoTransport::Rgb::MergeFrom(from.as_rgb());
      break;
    }
    case kAsRgba: {
      mutable_as_rgba()->::ProtoTransport::Rgba::MergeFrom(from.as_rgba());
      break;
    }
    case COLOR_VARIANT_NOT_SET: {
      break;
    }
  }
}

void Color::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ProtoTransport.Color)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Color::CopyFrom(const Color& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ProtoTransport.Color)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Color::IsInitialized() const {
  return true;
}

void Color::Swap(Color* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Color::InternalSwap(Color* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(color_variant_, other->color_variant_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::google::protobuf::Metadata Color::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_renderer_2eproto);
  return ::file_level_metadata_renderer_2eproto[kIndexInFileMessages];
}


// ===================================================================

void RenderSettings::InitAsDefaultInstance() {
  ::ProtoTransport::_RenderSettings_default_instance_._instance.get_mutable()->stop_label_offset_ = const_cast< ::ProtoTransport::Point*>(
      ::ProtoTransport::Point::internal_default_instance());
  ::ProtoTransport::_RenderSettings_default_instance_._instance.get_mutable()->underlayer_color_ = const_cast< ::ProtoTransport::Color*>(
      ::ProtoTransport::Color::internal_default_instance());
  ::ProtoTransport::_RenderSettings_default_instance_._instance.get_mutable()->bus_label_offset_ = const_cast< ::ProtoTransport::Point*>(
      ::ProtoTransport::Point::internal_default_instance());
}
class RenderSettings::HasBitSetters {
 public:
  static const ::ProtoTransport::Point& stop_label_offset(const RenderSettings* msg);
  static const ::ProtoTransport::Color& underlayer_color(const RenderSettings* msg);
  static const ::ProtoTransport::Point& bus_label_offset(const RenderSettings* msg);
};

const ::ProtoTransport::Point&
RenderSettings::HasBitSetters::stop_label_offset(const RenderSettings* msg) {
  return *msg->stop_label_offset_;
}
const ::ProtoTransport::Color&
RenderSettings::HasBitSetters::underlayer_color(const RenderSettings* msg) {
  return *msg->underlayer_color_;
}
const ::ProtoTransport::Point&
RenderSettings::HasBitSetters::bus_label_offset(const RenderSettings* msg) {
  return *msg->bus_label_offset_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RenderSettings::kWidthFieldNumber;
const int RenderSettings::kHeightFieldNumber;
const int RenderSettings::kPaddingFieldNumber;
const int RenderSettings::kStopRadiusFieldNumber;
const int RenderSettings::kLineWidthFieldNumber;
const int RenderSettings::kStopLabelFontSizeFieldNumber;
const int RenderSettings::kStopLabelOffsetFieldNumber;
const int RenderSettings::kUnderlayerColorFieldNumber;
const int RenderSettings::kUnderlayerWidthFieldNumber;
const int RenderSettings::kBusLabelFontSizeFieldNumber;
const int RenderSettings::kBusLabelOffsetFieldNumber;
const int RenderSettings::kColorPaletteFieldNumber;
const int RenderSettings::kLayersFieldNumber;
const int RenderSettings::kOuterMarginFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RenderSettings::RenderSettings()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoTransport.RenderSettings)
}
RenderSettings::RenderSettings(const RenderSettings& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      color_palette_(from.color_palette_),
      layers_(from.layers_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_stop_label_offset()) {
    stop_label_offset_ = new ::ProtoTransport::Point(*from.stop_label_offset_);
  } else {
    stop_label_offset_ = nullptr;
  }
  if (from.has_underlayer_color()) {
    underlayer_color_ = new ::ProtoTransport::Color(*from.underlayer_color_);
  } else {
    underlayer_color_ = nullptr;
  }
  if (from.has_bus_label_offset()) {
    bus_label_offset_ = new ::ProtoTransport::Point(*from.bus_label_offset_);
  } else {
    bus_label_offset_ = nullptr;
  }
  ::memcpy(&width_, &from.width_,
    static_cast<size_t>(reinterpret_cast<char*>(&outer_margin_) -
    reinterpret_cast<char*>(&width_)) + sizeof(outer_margin_));
  // @@protoc_insertion_point(copy_constructor:ProtoTransport.RenderSettings)
}

void RenderSettings::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_RenderSettings_renderer_2eproto.base);
  ::memset(&stop_label_offset_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&outer_margin_) -
      reinterpret_cast<char*>(&stop_label_offset_)) + sizeof(outer_margin_));
}

RenderSettings::~RenderSettings() {
  // @@protoc_insertion_point(destructor:ProtoTransport.RenderSettings)
  SharedDtor();
}

void RenderSettings::SharedDtor() {
  if (this != internal_default_instance()) delete stop_label_offset_;
  if (this != internal_default_instance()) delete underlayer_color_;
  if (this != internal_default_instance()) delete bus_label_offset_;
}

void RenderSettings::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RenderSettings& RenderSettings::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_RenderSettings_renderer_2eproto.base);
  return *internal_default_instance();
}


void RenderSettings::Clear() {
// @@protoc_insertion_point(message_clear_start:ProtoTransport.RenderSettings)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  color_palette_.Clear();
  layers_.Clear();
  if (GetArenaNoVirtual() == nullptr && stop_label_offset_ != nullptr) {
    delete stop_label_offset_;
  }
  stop_label_offset_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && underlayer_color_ != nullptr) {
    delete underlayer_color_;
  }
  underlayer_color_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && bus_label_offset_ != nullptr) {
    delete bus_label_offset_;
  }
  bus_label_offset_ = nullptr;
  ::memset(&width_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&outer_margin_) -
      reinterpret_cast<char*>(&width_)) + sizeof(outer_margin_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RenderSettings::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<RenderSettings*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // double width = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 9) goto handle_unusual;
        msg->set_width(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // double height = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 17) goto handle_unusual;
        msg->set_height(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // double padding = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 25) goto handle_unusual;
        msg->set_padding(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // double stop_radius = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 33) goto handle_unusual;
        msg->set_stop_radius(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // double line_width = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 41) goto handle_unusual;
        msg->set_line_width(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // int32 stop_label_font_size = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        msg->set_stop_label_font_size(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // .ProtoTransport.Point stop_label_offset = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 58) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::ProtoTransport::Point::_InternalParse;
        object = msg->mutable_stop_label_offset();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .ProtoTransport.Color underlayer_color = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 66) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::ProtoTransport::Color::_InternalParse;
        object = msg->mutable_underlayer_color();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // double underlayer_width = 9;
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) != 73) goto handle_unusual;
        msg->set_underlayer_width(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // int32 bus_label_font_size = 10;
      case 10: {
        if (static_cast<::google::protobuf::uint8>(tag) != 80) goto handle_unusual;
        msg->set_bus_label_font_size(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // .ProtoTransport.Point bus_label_offset = 11;
      case 11: {
        if (static_cast<::google::protobuf::uint8>(tag) != 90) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::ProtoTransport::Point::_InternalParse;
        object = msg->mutable_bus_label_offset();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // repeated .ProtoTransport.Color color_palette = 12;
      case 12: {
        if (static_cast<::google::protobuf::uint8>(tag) != 98) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::ProtoTransport::Color::_InternalParse;
          object = msg->add_color_palette();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 98 && (ptr += 1));
        break;
      }
      // repeated string layers = 13;
      case 13: {
        if (static_cast<::google::protobuf::uint8>(tag) != 106) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          ctx->extra_parse_data().SetFieldName("ProtoTransport.RenderSettings.layers");
          object = msg->add_layers();
          if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
            parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
            goto string_till_end;
          }
          GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
          ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
          ptr += size;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 106 && (ptr += 1));
        break;
      }
      // double outer_margin = 14;
      case 14: {
        if (static_cast<::google::protobuf::uint8>(tag) != 113) goto handle_unusual;
        msg->set_outer_margin(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RenderSettings::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoTransport.RenderSettings)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double width = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (9 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double height = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (17 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double padding = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (25 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &padding_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double stop_radius = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (33 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &stop_radius_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double line_width = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (41 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &line_width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 stop_label_font_size = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &stop_label_font_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ProtoTransport.Point stop_label_offset = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (58 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_stop_label_offset()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ProtoTransport.Color underlayer_color = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (66 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_underlayer_color()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double underlayer_width = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (73 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &underlayer_width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 bus_label_font_size = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (80 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bus_label_font_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ProtoTransport.Point bus_label_offset = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (90 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_bus_label_offset()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .ProtoTransport.Color color_palette = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (98 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_color_palette()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string layers = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (106 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_layers()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->layers(this->layers_size() - 1).data(),
            static_cast<int>(this->layers(this->layers_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ProtoTransport.RenderSettings.layers"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double outer_margin = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (113 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &outer_margin_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoTransport.RenderSettings)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoTransport.RenderSettings)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RenderSettings::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoTransport.RenderSettings)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double width = 1;
  if (this->width() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->width(), output);
  }

  // double height = 2;
  if (this->height() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->height(), output);
  }

  // double padding = 3;
  if (this->padding() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->padding(), output);
  }

  // double stop_radius = 4;
  if (this->stop_radius() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->stop_radius(), output);
  }

  // double line_width = 5;
  if (this->line_width() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->line_width(), output);
  }

  // int32 stop_label_font_size = 6;
  if (this->stop_label_font_size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->stop_label_font_size(), output);
  }

  // .ProtoTransport.Point stop_label_offset = 7;
  if (this->has_stop_label_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, HasBitSetters::stop_label_offset(this), output);
  }

  // .ProtoTransport.Color underlayer_color = 8;
  if (this->has_underlayer_color()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, HasBitSetters::underlayer_color(this), output);
  }

  // double underlayer_width = 9;
  if (this->underlayer_width() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->underlayer_width(), output);
  }

  // int32 bus_label_font_size = 10;
  if (this->bus_label_font_size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->bus_label_font_size(), output);
  }

  // .ProtoTransport.Point bus_label_offset = 11;
  if (this->has_bus_label_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, HasBitSetters::bus_label_offset(this), output);
  }

  // repeated .ProtoTransport.Color color_palette = 12;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->color_palette_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12,
      this->color_palette(static_cast<int>(i)),
      output);
  }

  // repeated string layers = 13;
  for (int i = 0, n = this->layers_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->layers(i).data(), static_cast<int>(this->layers(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ProtoTransport.RenderSettings.layers");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      13, this->layers(i), output);
  }

  // double outer_margin = 14;
  if (this->outer_margin() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(14, this->outer_margin(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoTransport.RenderSettings)
}

::google::protobuf::uint8* RenderSettings::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoTransport.RenderSettings)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double width = 1;
  if (this->width() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->width(), target);
  }

  // double height = 2;
  if (this->height() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->height(), target);
  }

  // double padding = 3;
  if (this->padding() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->padding(), target);
  }

  // double stop_radius = 4;
  if (this->stop_radius() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->stop_radius(), target);
  }

  // double line_width = 5;
  if (this->line_width() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->line_width(), target);
  }

  // int32 stop_label_font_size = 6;
  if (this->stop_label_font_size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->stop_label_font_size(), target);
  }

  // .ProtoTransport.Point stop_label_offset = 7;
  if (this->has_stop_label_offset()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, HasBitSetters::stop_label_offset(this), target);
  }

  // .ProtoTransport.Color underlayer_color = 8;
  if (this->has_underlayer_color()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, HasBitSetters::underlayer_color(this), target);
  }

  // double underlayer_width = 9;
  if (this->underlayer_width() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->underlayer_width(), target);
  }

  // int32 bus_label_font_size = 10;
  if (this->bus_label_font_size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->bus_label_font_size(), target);
  }

  // .ProtoTransport.Point bus_label_offset = 11;
  if (this->has_bus_label_offset()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        11, HasBitSetters::bus_label_offset(this), target);
  }

  // repeated .ProtoTransport.Color color_palette = 12;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->color_palette_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        12, this->color_palette(static_cast<int>(i)), target);
  }

  // repeated string layers = 13;
  for (int i = 0, n = this->layers_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->layers(i).data(), static_cast<int>(this->layers(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ProtoTransport.RenderSettings.layers");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(13, this->layers(i), target);
  }

  // double outer_margin = 14;
  if (this->outer_margin() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(14, this->outer_margin(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoTransport.RenderSettings)
  return target;
}

size_t RenderSettings::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ProtoTransport.RenderSettings)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ProtoTransport.Color color_palette = 12;
  {
    unsigned int count = static_cast<unsigned int>(this->color_palette_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->color_palette(static_cast<int>(i)));
    }
  }

  // repeated string layers = 13;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->layers_size());
  for (int i = 0, n = this->layers_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->layers(i));
  }

  // .ProtoTransport.Point stop_label_offset = 7;
  if (this->has_stop_label_offset()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *stop_label_offset_);
  }

  // .ProtoTransport.Color underlayer_color = 8;
  if (this->has_underlayer_color()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *underlayer_color_);
  }

  // .ProtoTransport.Point bus_label_offset = 11;
  if (this->has_bus_label_offset()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *bus_label_offset_);
  }

  // double width = 1;
  if (this->width() != 0) {
    total_size += 1 + 8;
  }

  // double height = 2;
  if (this->height() != 0) {
    total_size += 1 + 8;
  }

  // double padding = 3;
  if (this->padding() != 0) {
    total_size += 1 + 8;
  }

  // double stop_radius = 4;
  if (this->stop_radius() != 0) {
    total_size += 1 + 8;
  }

  // double line_width = 5;
  if (this->line_width() != 0) {
    total_size += 1 + 8;
  }

  // int32 stop_label_font_size = 6;
  if (this->stop_label_font_size() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->stop_label_font_size());
  }

  // int32 bus_label_font_size = 10;
  if (this->bus_label_font_size() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->bus_label_font_size());
  }

  // double underlayer_width = 9;
  if (this->underlayer_width() != 0) {
    total_size += 1 + 8;
  }

  // double outer_margin = 14;
  if (this->outer_margin() != 0) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RenderSettings::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ProtoTransport.RenderSettings)
  GOOGLE_DCHECK_NE(&from, this);
  const RenderSettings* source =
      ::google::protobuf::DynamicCastToGenerated<RenderSettings>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ProtoTransport.RenderSettings)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ProtoTransport.RenderSettings)
    MergeFrom(*source);
  }
}

void RenderSettings::MergeFrom(const RenderSettings& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ProtoTransport.RenderSettings)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  color_palette_.MergeFrom(from.color_palette_);
  layers_.MergeFrom(from.layers_);
  if (from.has_stop_label_offset()) {
    mutable_stop_label_offset()->::ProtoTransport::Point::MergeFrom(from.stop_label_offset());
  }
  if (from.has_underlayer_color()) {
    mutable_underlayer_color()->::ProtoTransport::Color::MergeFrom(from.underlayer_color());
  }
  if (from.has_bus_label_offset()) {
    mutable_bus_label_offset()->::ProtoTransport::Point::MergeFrom(from.bus_label_offset());
  }
  if (from.width() != 0) {
    set_width(from.width());
  }
  if (from.height() != 0) {
    set_height(from.height());
  }
  if (from.padding() != 0) {
    set_padding(from.padding());
  }
  if (from.stop_radius() != 0) {
    set_stop_radius(from.stop_radius());
  }
  if (from.line_width() != 0) {
    set_line_width(from.line_width());
  }
  if (from.stop_label_font_size() != 0) {
    set_stop_label_font_size(from.stop_label_font_size());
  }
  if (from.bus_label_font_size() != 0) {
    set_bus_label_font_size(from.bus_label_font_size());
  }
  if (from.underlayer_width() != 0) {
    set_underlayer_width(from.underlayer_width());
  }
  if (from.outer_margin() != 0) {
    set_outer_margin(from.outer_margin());
  }
}

void RenderSettings::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ProtoTransport.RenderSettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RenderSettings::CopyFrom(const RenderSettings& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ProtoTransport.RenderSettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RenderSettings::IsInitialized() const {
  return true;
}

void RenderSettings::Swap(RenderSettings* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RenderSettings::InternalSwap(RenderSettings* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&color_palette_)->InternalSwap(CastToBase(&other->color_palette_));
  layers_.InternalSwap(CastToBase(&other->layers_));
  swap(stop_label_offset_, other->stop_label_offset_);
  swap(underlayer_color_, other->underlayer_color_);
  swap(bus_label_offset_, other->bus_label_offset_);
  swap(width_, other->width_);
  swap(height_, other->height_);
  swap(padding_, other->padding_);
  swap(stop_radius_, other->stop_radius_);
  swap(line_width_, other->line_width_);
  swap(stop_label_font_size_, other->stop_label_font_size_);
  swap(bus_label_font_size_, other->bus_label_font_size_);
  swap(underlayer_width_, other->underlayer_width_);
  swap(outer_margin_, other->outer_margin_);
}

::google::protobuf::Metadata RenderSettings::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_renderer_2eproto);
  return ::file_level_metadata_renderer_2eproto[kIndexInFileMessages];
}


// ===================================================================

void StopsCompressed::InitAsDefaultInstance() {
}
class StopsCompressed::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StopsCompressed::kNameFieldNumber;
const int StopsCompressed::kLatFieldNumber;
const int StopsCompressed::kLonFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StopsCompressed::StopsCompressed()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoTransport.StopsCompressed)
}
StopsCompressed::StopsCompressed(const StopsCompressed& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  ::memcpy(&lat_, &from.lat_,
    static_cast<size_t>(reinterpret_cast<char*>(&lon_) -
    reinterpret_cast<char*>(&lat_)) + sizeof(lon_));
  // @@protoc_insertion_point(copy_constructor:ProtoTransport.StopsCompressed)
}

void StopsCompressed::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_StopsCompressed_renderer_2eproto.base);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&lat_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&lon_) -
      reinterpret_cast<char*>(&lat_)) + sizeof(lon_));
}

StopsCompressed::~StopsCompressed() {
  // @@protoc_insertion_point(destructor:ProtoTransport.StopsCompressed)
  SharedDtor();
}

void StopsCompressed::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void StopsCompressed::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StopsCompressed& StopsCompressed::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_StopsCompressed_renderer_2eproto.base);
  return *internal_default_instance();
}


void StopsCompressed::Clear() {
// @@protoc_insertion_point(message_clear_start:ProtoTransport.StopsCompressed)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&lat_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&lon_) -
      reinterpret_cast<char*>(&lat_)) + sizeof(lon_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* StopsCompressed::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<StopsCompressed*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("ProtoTransport.StopsCompressed.name");
        object = msg->mutable_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // double lat = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 17) goto handle_unusual;
        msg->set_lat(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // double lon = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 25) goto handle_unusual;
        msg->set_lon(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool StopsCompressed::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoTransport.StopsCompressed)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ProtoTransport.StopsCompressed.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double lat = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (17 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lat_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double lon = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (25 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lon_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoTransport.StopsCompressed)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoTransport.StopsCompressed)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void StopsCompressed::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoTransport.StopsCompressed)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ProtoTransport.StopsCompressed.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // double lat = 2;
  if (this->lat() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->lat(), output);
  }

  // double lon = 3;
  if (this->lon() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->lon(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoTransport.StopsCompressed)
}

::google::protobuf::uint8* StopsCompressed::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoTransport.StopsCompressed)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ProtoTransport.StopsCompressed.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // double lat = 2;
  if (this->lat() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->lat(), target);
  }

  // double lon = 3;
  if (this->lon() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->lon(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoTransport.StopsCompressed)
  return target;
}

size_t StopsCompressed::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ProtoTransport.StopsCompressed)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // double lat = 2;
  if (this->lat() != 0) {
    total_size += 1 + 8;
  }

  // double lon = 3;
  if (this->lon() != 0) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StopsCompressed::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ProtoTransport.StopsCompressed)
  GOOGLE_DCHECK_NE(&from, this);
  const StopsCompressed* source =
      ::google::protobuf::DynamicCastToGenerated<StopsCompressed>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ProtoTransport.StopsCompressed)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ProtoTransport.StopsCompressed)
    MergeFrom(*source);
  }
}

void StopsCompressed::MergeFrom(const StopsCompressed& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ProtoTransport.StopsCompressed)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.lat() != 0) {
    set_lat(from.lat());
  }
  if (from.lon() != 0) {
    set_lon(from.lon());
  }
}

void StopsCompressed::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ProtoTransport.StopsCompressed)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StopsCompressed::CopyFrom(const StopsCompressed& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ProtoTransport.StopsCompressed)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StopsCompressed::IsInitialized() const {
  return true;
}

void StopsCompressed::Swap(StopsCompressed* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StopsCompressed::InternalSwap(StopsCompressed* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(lat_, other->lat_);
  swap(lon_, other->lon_);
}

::google::protobuf::Metadata StopsCompressed::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_renderer_2eproto);
  return ::file_level_metadata_renderer_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Renderer::InitAsDefaultInstance() {
  ::ProtoTransport::_Renderer_default_instance_._instance.get_mutable()->settings_ = const_cast< ::ProtoTransport::RenderSettings*>(
      ::ProtoTransport::RenderSettings::internal_default_instance());
}
class Renderer::HasBitSetters {
 public:
  static const ::ProtoTransport::RenderSettings& settings(const Renderer* msg);
};

const ::ProtoTransport::RenderSettings&
Renderer::HasBitSetters::settings(const Renderer* msg) {
  return *msg->settings_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Renderer::kStopsFieldNumber;
const int Renderer::kSettingsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Renderer::Renderer()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoTransport.Renderer)
}
Renderer::Renderer(const Renderer& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      stops_(from.stops_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_settings()) {
    settings_ = new ::ProtoTransport::RenderSettings(*from.settings_);
  } else {
    settings_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ProtoTransport.Renderer)
}

void Renderer::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Renderer_renderer_2eproto.base);
  settings_ = nullptr;
}

Renderer::~Renderer() {
  // @@protoc_insertion_point(destructor:ProtoTransport.Renderer)
  SharedDtor();
}

void Renderer::SharedDtor() {
  if (this != internal_default_instance()) delete settings_;
}

void Renderer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Renderer& Renderer::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Renderer_renderer_2eproto.base);
  return *internal_default_instance();
}


void Renderer::Clear() {
// @@protoc_insertion_point(message_clear_start:ProtoTransport.Renderer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  stops_.Clear();
  if (GetArenaNoVirtual() == nullptr && settings_ != nullptr) {
    delete settings_;
  }
  settings_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Renderer::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Renderer*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .ProtoTransport.StopsCompressed stops = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::ProtoTransport::StopsCompressed::_InternalParse;
          object = msg->add_stops();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      // .ProtoTransport.RenderSettings settings = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::ProtoTransport::RenderSettings::_InternalParse;
        object = msg->mutable_settings();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Renderer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoTransport.Renderer)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ProtoTransport.StopsCompressed stops = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_stops()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ProtoTransport.RenderSettings settings = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_settings()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoTransport.Renderer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoTransport.Renderer)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Renderer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoTransport.Renderer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ProtoTransport.StopsCompressed stops = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->stops_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->stops(static_cast<int>(i)),
      output);
  }

  // .ProtoTransport.RenderSettings settings = 2;
  if (this->has_settings()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::settings(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoTransport.Renderer)
}

::google::protobuf::uint8* Renderer::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoTransport.Renderer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ProtoTransport.StopsCompressed stops = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->stops_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->stops(static_cast<int>(i)), target);
  }

  // .ProtoTransport.RenderSettings settings = 2;
  if (this->has_settings()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::settings(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoTransport.Renderer)
  return target;
}

size_t Renderer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ProtoTransport.Renderer)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ProtoTransport.StopsCompressed stops = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->stops_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->stops(static_cast<int>(i)));
    }
  }

  // .ProtoTransport.RenderSettings settings = 2;
  if (this->has_settings()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *settings_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Renderer::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ProtoTransport.Renderer)
  GOOGLE_DCHECK_NE(&from, this);
  const Renderer* source =
      ::google::protobuf::DynamicCastToGenerated<Renderer>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ProtoTransport.Renderer)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ProtoTransport.Renderer)
    MergeFrom(*source);
  }
}

void Renderer::MergeFrom(const Renderer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ProtoTransport.Renderer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  stops_.MergeFrom(from.stops_);
  if (from.has_settings()) {
    mutable_settings()->::ProtoTransport::RenderSettings::MergeFrom(from.settings());
  }
}

void Renderer::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ProtoTransport.Renderer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Renderer::CopyFrom(const Renderer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ProtoTransport.Renderer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Renderer::IsInitialized() const {
  return true;
}

void Renderer::Swap(Renderer* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Renderer::InternalSwap(Renderer* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&stops_)->InternalSwap(CastToBase(&other->stops_));
  swap(settings_, other->settings_);
}

::google::protobuf::Metadata Renderer::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_renderer_2eproto);
  return ::file_level_metadata_renderer_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace ProtoTransport
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::ProtoTransport::Point* Arena::CreateMaybeMessage< ::ProtoTransport::Point >(Arena* arena) {
  return Arena::CreateInternal< ::ProtoTransport::Point >(arena);
}
template<> PROTOBUF_NOINLINE ::ProtoTransport::Rgb* Arena::CreateMaybeMessage< ::ProtoTransport::Rgb >(Arena* arena) {
  return Arena::CreateInternal< ::ProtoTransport::Rgb >(arena);
}
template<> PROTOBUF_NOINLINE ::ProtoTransport::Rgba* Arena::CreateMaybeMessage< ::ProtoTransport::Rgba >(Arena* arena) {
  return Arena::CreateInternal< ::ProtoTransport::Rgba >(arena);
}
template<> PROTOBUF_NOINLINE ::ProtoTransport::Color* Arena::CreateMaybeMessage< ::ProtoTransport::Color >(Arena* arena) {
  return Arena::CreateInternal< ::ProtoTransport::Color >(arena);
}
template<> PROTOBUF_NOINLINE ::ProtoTransport::RenderSettings* Arena::CreateMaybeMessage< ::ProtoTransport::RenderSettings >(Arena* arena) {
  return Arena::CreateInternal< ::ProtoTransport::RenderSettings >(arena);
}
template<> PROTOBUF_NOINLINE ::ProtoTransport::StopsCompressed* Arena::CreateMaybeMessage< ::ProtoTransport::StopsCompressed >(Arena* arena) {
  return Arena::CreateInternal< ::ProtoTransport::StopsCompressed >(arena);
}
template<> PROTOBUF_NOINLINE ::ProtoTransport::Renderer* Arena::CreateMaybeMessage< ::ProtoTransport::Renderer >(Arena* arena) {
  return Arena::CreateInternal< ::ProtoTransport::Renderer >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
