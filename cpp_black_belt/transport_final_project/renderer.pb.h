// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: renderer.proto

#ifndef PROTOBUF_INCLUDED_renderer_2eproto
#define PROTOBUF_INCLUDED_renderer_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_renderer_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_renderer_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[7]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_renderer_2eproto();
namespace ProtoTransport {
class Color;
class ColorDefaultTypeInternal;
extern ColorDefaultTypeInternal _Color_default_instance_;
class Point;
class PointDefaultTypeInternal;
extern PointDefaultTypeInternal _Point_default_instance_;
class RenderSettings;
class RenderSettingsDefaultTypeInternal;
extern RenderSettingsDefaultTypeInternal _RenderSettings_default_instance_;
class Renderer;
class RendererDefaultTypeInternal;
extern RendererDefaultTypeInternal _Renderer_default_instance_;
class Rgb;
class RgbDefaultTypeInternal;
extern RgbDefaultTypeInternal _Rgb_default_instance_;
class Rgba;
class RgbaDefaultTypeInternal;
extern RgbaDefaultTypeInternal _Rgba_default_instance_;
class StopsCompressed;
class StopsCompressedDefaultTypeInternal;
extern StopsCompressedDefaultTypeInternal _StopsCompressed_default_instance_;
}  // namespace ProtoTransport
namespace google {
namespace protobuf {
template<> ::ProtoTransport::Color* Arena::CreateMaybeMessage<::ProtoTransport::Color>(Arena*);
template<> ::ProtoTransport::Point* Arena::CreateMaybeMessage<::ProtoTransport::Point>(Arena*);
template<> ::ProtoTransport::RenderSettings* Arena::CreateMaybeMessage<::ProtoTransport::RenderSettings>(Arena*);
template<> ::ProtoTransport::Renderer* Arena::CreateMaybeMessage<::ProtoTransport::Renderer>(Arena*);
template<> ::ProtoTransport::Rgb* Arena::CreateMaybeMessage<::ProtoTransport::Rgb>(Arena*);
template<> ::ProtoTransport::Rgba* Arena::CreateMaybeMessage<::ProtoTransport::Rgba>(Arena*);
template<> ::ProtoTransport::StopsCompressed* Arena::CreateMaybeMessage<::ProtoTransport::StopsCompressed>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace ProtoTransport {

// ===================================================================

class Point :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ProtoTransport.Point) */ {
 public:
  Point();
  virtual ~Point();

  Point(const Point& from);

  inline Point& operator=(const Point& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Point(Point&& from) noexcept
    : Point() {
    *this = ::std::move(from);
  }

  inline Point& operator=(Point&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Point& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Point* internal_default_instance() {
    return reinterpret_cast<const Point*>(
               &_Point_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Point* other);
  friend void swap(Point& a, Point& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Point* New() const final {
    return CreateMaybeMessage<Point>(nullptr);
  }

  Point* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Point>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Point& from);
  void MergeFrom(const Point& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Point* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // double x = 1;
  void clear_x();
  static const int kXFieldNumber = 1;
  double x() const;
  void set_x(double value);

  // double y = 2;
  void clear_y();
  static const int kYFieldNumber = 2;
  double y() const;
  void set_y(double value);

  // @@protoc_insertion_point(class_scope:ProtoTransport.Point)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  double x_;
  double y_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_renderer_2eproto;
};
// -------------------------------------------------------------------

class Rgb :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ProtoTransport.Rgb) */ {
 public:
  Rgb();
  virtual ~Rgb();

  Rgb(const Rgb& from);

  inline Rgb& operator=(const Rgb& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Rgb(Rgb&& from) noexcept
    : Rgb() {
    *this = ::std::move(from);
  }

  inline Rgb& operator=(Rgb&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Rgb& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Rgb* internal_default_instance() {
    return reinterpret_cast<const Rgb*>(
               &_Rgb_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(Rgb* other);
  friend void swap(Rgb& a, Rgb& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Rgb* New() const final {
    return CreateMaybeMessage<Rgb>(nullptr);
  }

  Rgb* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Rgb>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Rgb& from);
  void MergeFrom(const Rgb& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Rgb* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 red = 1;
  void clear_red();
  static const int kRedFieldNumber = 1;
  ::google::protobuf::uint32 red() const;
  void set_red(::google::protobuf::uint32 value);

  // uint32 green = 2;
  void clear_green();
  static const int kGreenFieldNumber = 2;
  ::google::protobuf::uint32 green() const;
  void set_green(::google::protobuf::uint32 value);

  // uint32 blue = 3;
  void clear_blue();
  static const int kBlueFieldNumber = 3;
  ::google::protobuf::uint32 blue() const;
  void set_blue(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:ProtoTransport.Rgb)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 red_;
  ::google::protobuf::uint32 green_;
  ::google::protobuf::uint32 blue_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_renderer_2eproto;
};
// -------------------------------------------------------------------

class Rgba :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ProtoTransport.Rgba) */ {
 public:
  Rgba();
  virtual ~Rgba();

  Rgba(const Rgba& from);

  inline Rgba& operator=(const Rgba& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Rgba(Rgba&& from) noexcept
    : Rgba() {
    *this = ::std::move(from);
  }

  inline Rgba& operator=(Rgba&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Rgba& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Rgba* internal_default_instance() {
    return reinterpret_cast<const Rgba*>(
               &_Rgba_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(Rgba* other);
  friend void swap(Rgba& a, Rgba& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Rgba* New() const final {
    return CreateMaybeMessage<Rgba>(nullptr);
  }

  Rgba* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Rgba>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Rgba& from);
  void MergeFrom(const Rgba& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Rgba* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 red = 1;
  void clear_red();
  static const int kRedFieldNumber = 1;
  ::google::protobuf::uint32 red() const;
  void set_red(::google::protobuf::uint32 value);

  // uint32 green = 2;
  void clear_green();
  static const int kGreenFieldNumber = 2;
  ::google::protobuf::uint32 green() const;
  void set_green(::google::protobuf::uint32 value);

  // double alpha = 4;
  void clear_alpha();
  static const int kAlphaFieldNumber = 4;
  double alpha() const;
  void set_alpha(double value);

  // uint32 blue = 3;
  void clear_blue();
  static const int kBlueFieldNumber = 3;
  ::google::protobuf::uint32 blue() const;
  void set_blue(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:ProtoTransport.Rgba)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 red_;
  ::google::protobuf::uint32 green_;
  double alpha_;
  ::google::protobuf::uint32 blue_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_renderer_2eproto;
};
// -------------------------------------------------------------------

class Color :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ProtoTransport.Color) */ {
 public:
  Color();
  virtual ~Color();

  Color(const Color& from);

  inline Color& operator=(const Color& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Color(Color&& from) noexcept
    : Color() {
    *this = ::std::move(from);
  }

  inline Color& operator=(Color&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Color& default_instance();

  enum ColorVariantCase {
    kAsString = 1,
    kAsRgb = 2,
    kAsRgba = 3,
    COLOR_VARIANT_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Color* internal_default_instance() {
    return reinterpret_cast<const Color*>(
               &_Color_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(Color* other);
  friend void swap(Color& a, Color& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Color* New() const final {
    return CreateMaybeMessage<Color>(nullptr);
  }

  Color* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Color>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Color& from);
  void MergeFrom(const Color& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Color* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string as_string = 1;
  private:
  bool has_as_string() const;
  public:
  void clear_as_string();
  static const int kAsStringFieldNumber = 1;
  const ::std::string& as_string() const;
  void set_as_string(const ::std::string& value);
  #if LANG_CXX11
  void set_as_string(::std::string&& value);
  #endif
  void set_as_string(const char* value);
  void set_as_string(const char* value, size_t size);
  ::std::string* mutable_as_string();
  ::std::string* release_as_string();
  void set_allocated_as_string(::std::string* as_string);

  // .ProtoTransport.Rgb as_rgb = 2;
  bool has_as_rgb() const;
  void clear_as_rgb();
  static const int kAsRgbFieldNumber = 2;
  const ::ProtoTransport::Rgb& as_rgb() const;
  ::ProtoTransport::Rgb* release_as_rgb();
  ::ProtoTransport::Rgb* mutable_as_rgb();
  void set_allocated_as_rgb(::ProtoTransport::Rgb* as_rgb);

  // .ProtoTransport.Rgba as_rgba = 3;
  bool has_as_rgba() const;
  void clear_as_rgba();
  static const int kAsRgbaFieldNumber = 3;
  const ::ProtoTransport::Rgba& as_rgba() const;
  ::ProtoTransport::Rgba* release_as_rgba();
  ::ProtoTransport::Rgba* mutable_as_rgba();
  void set_allocated_as_rgba(::ProtoTransport::Rgba* as_rgba);

  void clear_color_variant();
  ColorVariantCase color_variant_case() const;
  // @@protoc_insertion_point(class_scope:ProtoTransport.Color)
 private:
  class HasBitSetters;
  void set_has_as_string();
  void set_has_as_rgb();
  void set_has_as_rgba();

  inline bool has_color_variant() const;
  inline void clear_has_color_variant();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  union ColorVariantUnion {
    ColorVariantUnion() {}
    ::google::protobuf::internal::ArenaStringPtr as_string_;
    ::ProtoTransport::Rgb* as_rgb_;
    ::ProtoTransport::Rgba* as_rgba_;
  } color_variant_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::TableStruct_renderer_2eproto;
};
// -------------------------------------------------------------------

class RenderSettings :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ProtoTransport.RenderSettings) */ {
 public:
  RenderSettings();
  virtual ~RenderSettings();

  RenderSettings(const RenderSettings& from);

  inline RenderSettings& operator=(const RenderSettings& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RenderSettings(RenderSettings&& from) noexcept
    : RenderSettings() {
    *this = ::std::move(from);
  }

  inline RenderSettings& operator=(RenderSettings&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const RenderSettings& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RenderSettings* internal_default_instance() {
    return reinterpret_cast<const RenderSettings*>(
               &_RenderSettings_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(RenderSettings* other);
  friend void swap(RenderSettings& a, RenderSettings& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RenderSettings* New() const final {
    return CreateMaybeMessage<RenderSettings>(nullptr);
  }

  RenderSettings* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RenderSettings>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RenderSettings& from);
  void MergeFrom(const RenderSettings& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RenderSettings* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .ProtoTransport.Color color_palette = 12;
  int color_palette_size() const;
  void clear_color_palette();
  static const int kColorPaletteFieldNumber = 12;
  ::ProtoTransport::Color* mutable_color_palette(int index);
  ::google::protobuf::RepeatedPtrField< ::ProtoTransport::Color >*
      mutable_color_palette();
  const ::ProtoTransport::Color& color_palette(int index) const;
  ::ProtoTransport::Color* add_color_palette();
  const ::google::protobuf::RepeatedPtrField< ::ProtoTransport::Color >&
      color_palette() const;

  // repeated string layers = 13;
  int layers_size() const;
  void clear_layers();
  static const int kLayersFieldNumber = 13;
  const ::std::string& layers(int index) const;
  ::std::string* mutable_layers(int index);
  void set_layers(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_layers(int index, ::std::string&& value);
  #endif
  void set_layers(int index, const char* value);
  void set_layers(int index, const char* value, size_t size);
  ::std::string* add_layers();
  void add_layers(const ::std::string& value);
  #if LANG_CXX11
  void add_layers(::std::string&& value);
  #endif
  void add_layers(const char* value);
  void add_layers(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField<::std::string>& layers() const;
  ::google::protobuf::RepeatedPtrField<::std::string>* mutable_layers();

  // .ProtoTransport.Point stop_label_offset = 7;
  bool has_stop_label_offset() const;
  void clear_stop_label_offset();
  static const int kStopLabelOffsetFieldNumber = 7;
  const ::ProtoTransport::Point& stop_label_offset() const;
  ::ProtoTransport::Point* release_stop_label_offset();
  ::ProtoTransport::Point* mutable_stop_label_offset();
  void set_allocated_stop_label_offset(::ProtoTransport::Point* stop_label_offset);

  // .ProtoTransport.Color underlayer_color = 8;
  bool has_underlayer_color() const;
  void clear_underlayer_color();
  static const int kUnderlayerColorFieldNumber = 8;
  const ::ProtoTransport::Color& underlayer_color() const;
  ::ProtoTransport::Color* release_underlayer_color();
  ::ProtoTransport::Color* mutable_underlayer_color();
  void set_allocated_underlayer_color(::ProtoTransport::Color* underlayer_color);

  // .ProtoTransport.Point bus_label_offset = 11;
  bool has_bus_label_offset() const;
  void clear_bus_label_offset();
  static const int kBusLabelOffsetFieldNumber = 11;
  const ::ProtoTransport::Point& bus_label_offset() const;
  ::ProtoTransport::Point* release_bus_label_offset();
  ::ProtoTransport::Point* mutable_bus_label_offset();
  void set_allocated_bus_label_offset(::ProtoTransport::Point* bus_label_offset);

  // double width = 1;
  void clear_width();
  static const int kWidthFieldNumber = 1;
  double width() const;
  void set_width(double value);

  // double height = 2;
  void clear_height();
  static const int kHeightFieldNumber = 2;
  double height() const;
  void set_height(double value);

  // double padding = 3;
  void clear_padding();
  static const int kPaddingFieldNumber = 3;
  double padding() const;
  void set_padding(double value);

  // double stop_radius = 4;
  void clear_stop_radius();
  static const int kStopRadiusFieldNumber = 4;
  double stop_radius() const;
  void set_stop_radius(double value);

  // double line_width = 5;
  void clear_line_width();
  static const int kLineWidthFieldNumber = 5;
  double line_width() const;
  void set_line_width(double value);

  // int32 stop_label_font_size = 6;
  void clear_stop_label_font_size();
  static const int kStopLabelFontSizeFieldNumber = 6;
  ::google::protobuf::int32 stop_label_font_size() const;
  void set_stop_label_font_size(::google::protobuf::int32 value);

  // int32 bus_label_font_size = 10;
  void clear_bus_label_font_size();
  static const int kBusLabelFontSizeFieldNumber = 10;
  ::google::protobuf::int32 bus_label_font_size() const;
  void set_bus_label_font_size(::google::protobuf::int32 value);

  // double underlayer_width = 9;
  void clear_underlayer_width();
  static const int kUnderlayerWidthFieldNumber = 9;
  double underlayer_width() const;
  void set_underlayer_width(double value);

  // double outer_margin = 14;
  void clear_outer_margin();
  static const int kOuterMarginFieldNumber = 14;
  double outer_margin() const;
  void set_outer_margin(double value);

  // @@protoc_insertion_point(class_scope:ProtoTransport.RenderSettings)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::ProtoTransport::Color > color_palette_;
  ::google::protobuf::RepeatedPtrField<::std::string> layers_;
  ::ProtoTransport::Point* stop_label_offset_;
  ::ProtoTransport::Color* underlayer_color_;
  ::ProtoTransport::Point* bus_label_offset_;
  double width_;
  double height_;
  double padding_;
  double stop_radius_;
  double line_width_;
  ::google::protobuf::int32 stop_label_font_size_;
  ::google::protobuf::int32 bus_label_font_size_;
  double underlayer_width_;
  double outer_margin_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_renderer_2eproto;
};
// -------------------------------------------------------------------

class StopsCompressed :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ProtoTransport.StopsCompressed) */ {
 public:
  StopsCompressed();
  virtual ~StopsCompressed();

  StopsCompressed(const StopsCompressed& from);

  inline StopsCompressed& operator=(const StopsCompressed& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  StopsCompressed(StopsCompressed&& from) noexcept
    : StopsCompressed() {
    *this = ::std::move(from);
  }

  inline StopsCompressed& operator=(StopsCompressed&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const StopsCompressed& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StopsCompressed* internal_default_instance() {
    return reinterpret_cast<const StopsCompressed*>(
               &_StopsCompressed_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(StopsCompressed* other);
  friend void swap(StopsCompressed& a, StopsCompressed& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline StopsCompressed* New() const final {
    return CreateMaybeMessage<StopsCompressed>(nullptr);
  }

  StopsCompressed* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<StopsCompressed>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const StopsCompressed& from);
  void MergeFrom(const StopsCompressed& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StopsCompressed* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // double lat = 2;
  void clear_lat();
  static const int kLatFieldNumber = 2;
  double lat() const;
  void set_lat(double value);

  // double lon = 3;
  void clear_lon();
  static const int kLonFieldNumber = 3;
  double lon() const;
  void set_lon(double value);

  // @@protoc_insertion_point(class_scope:ProtoTransport.StopsCompressed)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  double lat_;
  double lon_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_renderer_2eproto;
};
// -------------------------------------------------------------------

class Renderer :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ProtoTransport.Renderer) */ {
 public:
  Renderer();
  virtual ~Renderer();

  Renderer(const Renderer& from);

  inline Renderer& operator=(const Renderer& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Renderer(Renderer&& from) noexcept
    : Renderer() {
    *this = ::std::move(from);
  }

  inline Renderer& operator=(Renderer&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Renderer& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Renderer* internal_default_instance() {
    return reinterpret_cast<const Renderer*>(
               &_Renderer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(Renderer* other);
  friend void swap(Renderer& a, Renderer& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Renderer* New() const final {
    return CreateMaybeMessage<Renderer>(nullptr);
  }

  Renderer* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Renderer>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Renderer& from);
  void MergeFrom(const Renderer& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Renderer* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .ProtoTransport.StopsCompressed stops = 1;
  int stops_size() const;
  void clear_stops();
  static const int kStopsFieldNumber = 1;
  ::ProtoTransport::StopsCompressed* mutable_stops(int index);
  ::google::protobuf::RepeatedPtrField< ::ProtoTransport::StopsCompressed >*
      mutable_stops();
  const ::ProtoTransport::StopsCompressed& stops(int index) const;
  ::ProtoTransport::StopsCompressed* add_stops();
  const ::google::protobuf::RepeatedPtrField< ::ProtoTransport::StopsCompressed >&
      stops() const;

  // .ProtoTransport.RenderSettings settings = 2;
  bool has_settings() const;
  void clear_settings();
  static const int kSettingsFieldNumber = 2;
  const ::ProtoTransport::RenderSettings& settings() const;
  ::ProtoTransport::RenderSettings* release_settings();
  ::ProtoTransport::RenderSettings* mutable_settings();
  void set_allocated_settings(::ProtoTransport::RenderSettings* settings);

  // @@protoc_insertion_point(class_scope:ProtoTransport.Renderer)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::ProtoTransport::StopsCompressed > stops_;
  ::ProtoTransport::RenderSettings* settings_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_renderer_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Point

// double x = 1;
inline void Point::clear_x() {
  x_ = 0;
}
inline double Point::x() const {
  // @@protoc_insertion_point(field_get:ProtoTransport.Point.x)
  return x_;
}
inline void Point::set_x(double value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:ProtoTransport.Point.x)
}

// double y = 2;
inline void Point::clear_y() {
  y_ = 0;
}
inline double Point::y() const {
  // @@protoc_insertion_point(field_get:ProtoTransport.Point.y)
  return y_;
}
inline void Point::set_y(double value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:ProtoTransport.Point.y)
}

// -------------------------------------------------------------------

// Rgb

// uint32 red = 1;
inline void Rgb::clear_red() {
  red_ = 0u;
}
inline ::google::protobuf::uint32 Rgb::red() const {
  // @@protoc_insertion_point(field_get:ProtoTransport.Rgb.red)
  return red_;
}
inline void Rgb::set_red(::google::protobuf::uint32 value) {
  
  red_ = value;
  // @@protoc_insertion_point(field_set:ProtoTransport.Rgb.red)
}

// uint32 green = 2;
inline void Rgb::clear_green() {
  green_ = 0u;
}
inline ::google::protobuf::uint32 Rgb::green() const {
  // @@protoc_insertion_point(field_get:ProtoTransport.Rgb.green)
  return green_;
}
inline void Rgb::set_green(::google::protobuf::uint32 value) {
  
  green_ = value;
  // @@protoc_insertion_point(field_set:ProtoTransport.Rgb.green)
}

// uint32 blue = 3;
inline void Rgb::clear_blue() {
  blue_ = 0u;
}
inline ::google::protobuf::uint32 Rgb::blue() const {
  // @@protoc_insertion_point(field_get:ProtoTransport.Rgb.blue)
  return blue_;
}
inline void Rgb::set_blue(::google::protobuf::uint32 value) {
  
  blue_ = value;
  // @@protoc_insertion_point(field_set:ProtoTransport.Rgb.blue)
}

// -------------------------------------------------------------------

// Rgba

// uint32 red = 1;
inline void Rgba::clear_red() {
  red_ = 0u;
}
inline ::google::protobuf::uint32 Rgba::red() const {
  // @@protoc_insertion_point(field_get:ProtoTransport.Rgba.red)
  return red_;
}
inline void Rgba::set_red(::google::protobuf::uint32 value) {
  
  red_ = value;
  // @@protoc_insertion_point(field_set:ProtoTransport.Rgba.red)
}

// uint32 green = 2;
inline void Rgba::clear_green() {
  green_ = 0u;
}
inline ::google::protobuf::uint32 Rgba::green() const {
  // @@protoc_insertion_point(field_get:ProtoTransport.Rgba.green)
  return green_;
}
inline void Rgba::set_green(::google::protobuf::uint32 value) {
  
  green_ = value;
  // @@protoc_insertion_point(field_set:ProtoTransport.Rgba.green)
}

// uint32 blue = 3;
inline void Rgba::clear_blue() {
  blue_ = 0u;
}
inline ::google::protobuf::uint32 Rgba::blue() const {
  // @@protoc_insertion_point(field_get:ProtoTransport.Rgba.blue)
  return blue_;
}
inline void Rgba::set_blue(::google::protobuf::uint32 value) {
  
  blue_ = value;
  // @@protoc_insertion_point(field_set:ProtoTransport.Rgba.blue)
}

// double alpha = 4;
inline void Rgba::clear_alpha() {
  alpha_ = 0;
}
inline double Rgba::alpha() const {
  // @@protoc_insertion_point(field_get:ProtoTransport.Rgba.alpha)
  return alpha_;
}
inline void Rgba::set_alpha(double value) {
  
  alpha_ = value;
  // @@protoc_insertion_point(field_set:ProtoTransport.Rgba.alpha)
}

// -------------------------------------------------------------------

// Color

// string as_string = 1;
inline bool Color::has_as_string() const {
  return color_variant_case() == kAsString;
}
inline void Color::set_has_as_string() {
  _oneof_case_[0] = kAsString;
}
inline void Color::clear_as_string() {
  if (has_as_string()) {
    color_variant_.as_string_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_color_variant();
  }
}
inline const ::std::string& Color::as_string() const {
  // @@protoc_insertion_point(field_get:ProtoTransport.Color.as_string)
  if (has_as_string()) {
    return color_variant_.as_string_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void Color::set_as_string(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:ProtoTransport.Color.as_string)
  if (!has_as_string()) {
    clear_color_variant();
    set_has_as_string();
    color_variant_.as_string_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  color_variant_.as_string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ProtoTransport.Color.as_string)
}
#if LANG_CXX11
inline void Color::set_as_string(::std::string&& value) {
  // @@protoc_insertion_point(field_set:ProtoTransport.Color.as_string)
  if (!has_as_string()) {
    clear_color_variant();
    set_has_as_string();
    color_variant_.as_string_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  color_variant_.as_string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ProtoTransport.Color.as_string)
}
#endif
inline void Color::set_as_string(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!has_as_string()) {
    clear_color_variant();
    set_has_as_string();
    color_variant_.as_string_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  color_variant_.as_string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ProtoTransport.Color.as_string)
}
inline void Color::set_as_string(const char* value, size_t size) {
  if (!has_as_string()) {
    clear_color_variant();
    set_has_as_string();
    color_variant_.as_string_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  color_variant_.as_string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ProtoTransport.Color.as_string)
}
inline ::std::string* Color::mutable_as_string() {
  if (!has_as_string()) {
    clear_color_variant();
    set_has_as_string();
    color_variant_.as_string_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:ProtoTransport.Color.as_string)
  return color_variant_.as_string_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Color::release_as_string() {
  // @@protoc_insertion_point(field_release:ProtoTransport.Color.as_string)
  if (has_as_string()) {
    clear_has_color_variant();
    return color_variant_.as_string_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return nullptr;
  }
}
inline void Color::set_allocated_as_string(::std::string* as_string) {
  if (has_color_variant()) {
    clear_color_variant();
  }
  if (as_string != nullptr) {
    set_has_as_string();
    color_variant_.as_string_.UnsafeSetDefault(as_string);
  }
  // @@protoc_insertion_point(field_set_allocated:ProtoTransport.Color.as_string)
}

// .ProtoTransport.Rgb as_rgb = 2;
inline bool Color::has_as_rgb() const {
  return color_variant_case() == kAsRgb;
}
inline void Color::set_has_as_rgb() {
  _oneof_case_[0] = kAsRgb;
}
inline void Color::clear_as_rgb() {
  if (has_as_rgb()) {
    delete color_variant_.as_rgb_;
    clear_has_color_variant();
  }
}
inline ::ProtoTransport::Rgb* Color::release_as_rgb() {
  // @@protoc_insertion_point(field_release:ProtoTransport.Color.as_rgb)
  if (has_as_rgb()) {
    clear_has_color_variant();
      ::ProtoTransport::Rgb* temp = color_variant_.as_rgb_;
    color_variant_.as_rgb_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::ProtoTransport::Rgb& Color::as_rgb() const {
  // @@protoc_insertion_point(field_get:ProtoTransport.Color.as_rgb)
  return has_as_rgb()
      ? *color_variant_.as_rgb_
      : *reinterpret_cast< ::ProtoTransport::Rgb*>(&::ProtoTransport::_Rgb_default_instance_);
}
inline ::ProtoTransport::Rgb* Color::mutable_as_rgb() {
  if (!has_as_rgb()) {
    clear_color_variant();
    set_has_as_rgb();
    color_variant_.as_rgb_ = CreateMaybeMessage< ::ProtoTransport::Rgb >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:ProtoTransport.Color.as_rgb)
  return color_variant_.as_rgb_;
}

// .ProtoTransport.Rgba as_rgba = 3;
inline bool Color::has_as_rgba() const {
  return color_variant_case() == kAsRgba;
}
inline void Color::set_has_as_rgba() {
  _oneof_case_[0] = kAsRgba;
}
inline void Color::clear_as_rgba() {
  if (has_as_rgba()) {
    delete color_variant_.as_rgba_;
    clear_has_color_variant();
  }
}
inline ::ProtoTransport::Rgba* Color::release_as_rgba() {
  // @@protoc_insertion_point(field_release:ProtoTransport.Color.as_rgba)
  if (has_as_rgba()) {
    clear_has_color_variant();
      ::ProtoTransport::Rgba* temp = color_variant_.as_rgba_;
    color_variant_.as_rgba_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::ProtoTransport::Rgba& Color::as_rgba() const {
  // @@protoc_insertion_point(field_get:ProtoTransport.Color.as_rgba)
  return has_as_rgba()
      ? *color_variant_.as_rgba_
      : *reinterpret_cast< ::ProtoTransport::Rgba*>(&::ProtoTransport::_Rgba_default_instance_);
}
inline ::ProtoTransport::Rgba* Color::mutable_as_rgba() {
  if (!has_as_rgba()) {
    clear_color_variant();
    set_has_as_rgba();
    color_variant_.as_rgba_ = CreateMaybeMessage< ::ProtoTransport::Rgba >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:ProtoTransport.Color.as_rgba)
  return color_variant_.as_rgba_;
}

inline bool Color::has_color_variant() const {
  return color_variant_case() != COLOR_VARIANT_NOT_SET;
}
inline void Color::clear_has_color_variant() {
  _oneof_case_[0] = COLOR_VARIANT_NOT_SET;
}
inline Color::ColorVariantCase Color::color_variant_case() const {
  return Color::ColorVariantCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// RenderSettings

// double width = 1;
inline void RenderSettings::clear_width() {
  width_ = 0;
}
inline double RenderSettings::width() const {
  // @@protoc_insertion_point(field_get:ProtoTransport.RenderSettings.width)
  return width_;
}
inline void RenderSettings::set_width(double value) {
  
  width_ = value;
  // @@protoc_insertion_point(field_set:ProtoTransport.RenderSettings.width)
}

// double height = 2;
inline void RenderSettings::clear_height() {
  height_ = 0;
}
inline double RenderSettings::height() const {
  // @@protoc_insertion_point(field_get:ProtoTransport.RenderSettings.height)
  return height_;
}
inline void RenderSettings::set_height(double value) {
  
  height_ = value;
  // @@protoc_insertion_point(field_set:ProtoTransport.RenderSettings.height)
}

// double padding = 3;
inline void RenderSettings::clear_padding() {
  padding_ = 0;
}
inline double RenderSettings::padding() const {
  // @@protoc_insertion_point(field_get:ProtoTransport.RenderSettings.padding)
  return padding_;
}
inline void RenderSettings::set_padding(double value) {
  
  padding_ = value;
  // @@protoc_insertion_point(field_set:ProtoTransport.RenderSettings.padding)
}

// double stop_radius = 4;
inline void RenderSettings::clear_stop_radius() {
  stop_radius_ = 0;
}
inline double RenderSettings::stop_radius() const {
  // @@protoc_insertion_point(field_get:ProtoTransport.RenderSettings.stop_radius)
  return stop_radius_;
}
inline void RenderSettings::set_stop_radius(double value) {
  
  stop_radius_ = value;
  // @@protoc_insertion_point(field_set:ProtoTransport.RenderSettings.stop_radius)
}

// double line_width = 5;
inline void RenderSettings::clear_line_width() {
  line_width_ = 0;
}
inline double RenderSettings::line_width() const {
  // @@protoc_insertion_point(field_get:ProtoTransport.RenderSettings.line_width)
  return line_width_;
}
inline void RenderSettings::set_line_width(double value) {
  
  line_width_ = value;
  // @@protoc_insertion_point(field_set:ProtoTransport.RenderSettings.line_width)
}

// int32 stop_label_font_size = 6;
inline void RenderSettings::clear_stop_label_font_size() {
  stop_label_font_size_ = 0;
}
inline ::google::protobuf::int32 RenderSettings::stop_label_font_size() const {
  // @@protoc_insertion_point(field_get:ProtoTransport.RenderSettings.stop_label_font_size)
  return stop_label_font_size_;
}
inline void RenderSettings::set_stop_label_font_size(::google::protobuf::int32 value) {
  
  stop_label_font_size_ = value;
  // @@protoc_insertion_point(field_set:ProtoTransport.RenderSettings.stop_label_font_size)
}

// .ProtoTransport.Point stop_label_offset = 7;
inline bool RenderSettings::has_stop_label_offset() const {
  return this != internal_default_instance() && stop_label_offset_ != nullptr;
}
inline void RenderSettings::clear_stop_label_offset() {
  if (GetArenaNoVirtual() == nullptr && stop_label_offset_ != nullptr) {
    delete stop_label_offset_;
  }
  stop_label_offset_ = nullptr;
}
inline const ::ProtoTransport::Point& RenderSettings::stop_label_offset() const {
  const ::ProtoTransport::Point* p = stop_label_offset_;
  // @@protoc_insertion_point(field_get:ProtoTransport.RenderSettings.stop_label_offset)
  return p != nullptr ? *p : *reinterpret_cast<const ::ProtoTransport::Point*>(
      &::ProtoTransport::_Point_default_instance_);
}
inline ::ProtoTransport::Point* RenderSettings::release_stop_label_offset() {
  // @@protoc_insertion_point(field_release:ProtoTransport.RenderSettings.stop_label_offset)
  
  ::ProtoTransport::Point* temp = stop_label_offset_;
  stop_label_offset_ = nullptr;
  return temp;
}
inline ::ProtoTransport::Point* RenderSettings::mutable_stop_label_offset() {
  
  if (stop_label_offset_ == nullptr) {
    auto* p = CreateMaybeMessage<::ProtoTransport::Point>(GetArenaNoVirtual());
    stop_label_offset_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ProtoTransport.RenderSettings.stop_label_offset)
  return stop_label_offset_;
}
inline void RenderSettings::set_allocated_stop_label_offset(::ProtoTransport::Point* stop_label_offset) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete stop_label_offset_;
  }
  if (stop_label_offset) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      stop_label_offset = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, stop_label_offset, submessage_arena);
    }
    
  } else {
    
  }
  stop_label_offset_ = stop_label_offset;
  // @@protoc_insertion_point(field_set_allocated:ProtoTransport.RenderSettings.stop_label_offset)
}

// .ProtoTransport.Color underlayer_color = 8;
inline bool RenderSettings::has_underlayer_color() const {
  return this != internal_default_instance() && underlayer_color_ != nullptr;
}
inline void RenderSettings::clear_underlayer_color() {
  if (GetArenaNoVirtual() == nullptr && underlayer_color_ != nullptr) {
    delete underlayer_color_;
  }
  underlayer_color_ = nullptr;
}
inline const ::ProtoTransport::Color& RenderSettings::underlayer_color() const {
  const ::ProtoTransport::Color* p = underlayer_color_;
  // @@protoc_insertion_point(field_get:ProtoTransport.RenderSettings.underlayer_color)
  return p != nullptr ? *p : *reinterpret_cast<const ::ProtoTransport::Color*>(
      &::ProtoTransport::_Color_default_instance_);
}
inline ::ProtoTransport::Color* RenderSettings::release_underlayer_color() {
  // @@protoc_insertion_point(field_release:ProtoTransport.RenderSettings.underlayer_color)
  
  ::ProtoTransport::Color* temp = underlayer_color_;
  underlayer_color_ = nullptr;
  return temp;
}
inline ::ProtoTransport::Color* RenderSettings::mutable_underlayer_color() {
  
  if (underlayer_color_ == nullptr) {
    auto* p = CreateMaybeMessage<::ProtoTransport::Color>(GetArenaNoVirtual());
    underlayer_color_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ProtoTransport.RenderSettings.underlayer_color)
  return underlayer_color_;
}
inline void RenderSettings::set_allocated_underlayer_color(::ProtoTransport::Color* underlayer_color) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete underlayer_color_;
  }
  if (underlayer_color) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      underlayer_color = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, underlayer_color, submessage_arena);
    }
    
  } else {
    
  }
  underlayer_color_ = underlayer_color;
  // @@protoc_insertion_point(field_set_allocated:ProtoTransport.RenderSettings.underlayer_color)
}

// double underlayer_width = 9;
inline void RenderSettings::clear_underlayer_width() {
  underlayer_width_ = 0;
}
inline double RenderSettings::underlayer_width() const {
  // @@protoc_insertion_point(field_get:ProtoTransport.RenderSettings.underlayer_width)
  return underlayer_width_;
}
inline void RenderSettings::set_underlayer_width(double value) {
  
  underlayer_width_ = value;
  // @@protoc_insertion_point(field_set:ProtoTransport.RenderSettings.underlayer_width)
}

// int32 bus_label_font_size = 10;
inline void RenderSettings::clear_bus_label_font_size() {
  bus_label_font_size_ = 0;
}
inline ::google::protobuf::int32 RenderSettings::bus_label_font_size() const {
  // @@protoc_insertion_point(field_get:ProtoTransport.RenderSettings.bus_label_font_size)
  return bus_label_font_size_;
}
inline void RenderSettings::set_bus_label_font_size(::google::protobuf::int32 value) {
  
  bus_label_font_size_ = value;
  // @@protoc_insertion_point(field_set:ProtoTransport.RenderSettings.bus_label_font_size)
}

// .ProtoTransport.Point bus_label_offset = 11;
inline bool RenderSettings::has_bus_label_offset() const {
  return this != internal_default_instance() && bus_label_offset_ != nullptr;
}
inline void RenderSettings::clear_bus_label_offset() {
  if (GetArenaNoVirtual() == nullptr && bus_label_offset_ != nullptr) {
    delete bus_label_offset_;
  }
  bus_label_offset_ = nullptr;
}
inline const ::ProtoTransport::Point& RenderSettings::bus_label_offset() const {
  const ::ProtoTransport::Point* p = bus_label_offset_;
  // @@protoc_insertion_point(field_get:ProtoTransport.RenderSettings.bus_label_offset)
  return p != nullptr ? *p : *reinterpret_cast<const ::ProtoTransport::Point*>(
      &::ProtoTransport::_Point_default_instance_);
}
inline ::ProtoTransport::Point* RenderSettings::release_bus_label_offset() {
  // @@protoc_insertion_point(field_release:ProtoTransport.RenderSettings.bus_label_offset)
  
  ::ProtoTransport::Point* temp = bus_label_offset_;
  bus_label_offset_ = nullptr;
  return temp;
}
inline ::ProtoTransport::Point* RenderSettings::mutable_bus_label_offset() {
  
  if (bus_label_offset_ == nullptr) {
    auto* p = CreateMaybeMessage<::ProtoTransport::Point>(GetArenaNoVirtual());
    bus_label_offset_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ProtoTransport.RenderSettings.bus_label_offset)
  return bus_label_offset_;
}
inline void RenderSettings::set_allocated_bus_label_offset(::ProtoTransport::Point* bus_label_offset) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete bus_label_offset_;
  }
  if (bus_label_offset) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      bus_label_offset = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, bus_label_offset, submessage_arena);
    }
    
  } else {
    
  }
  bus_label_offset_ = bus_label_offset;
  // @@protoc_insertion_point(field_set_allocated:ProtoTransport.RenderSettings.bus_label_offset)
}

// repeated .ProtoTransport.Color color_palette = 12;
inline int RenderSettings::color_palette_size() const {
  return color_palette_.size();
}
inline void RenderSettings::clear_color_palette() {
  color_palette_.Clear();
}
inline ::ProtoTransport::Color* RenderSettings::mutable_color_palette(int index) {
  // @@protoc_insertion_point(field_mutable:ProtoTransport.RenderSettings.color_palette)
  return color_palette_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::ProtoTransport::Color >*
RenderSettings::mutable_color_palette() {
  // @@protoc_insertion_point(field_mutable_list:ProtoTransport.RenderSettings.color_palette)
  return &color_palette_;
}
inline const ::ProtoTransport::Color& RenderSettings::color_palette(int index) const {
  // @@protoc_insertion_point(field_get:ProtoTransport.RenderSettings.color_palette)
  return color_palette_.Get(index);
}
inline ::ProtoTransport::Color* RenderSettings::add_color_palette() {
  // @@protoc_insertion_point(field_add:ProtoTransport.RenderSettings.color_palette)
  return color_palette_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ProtoTransport::Color >&
RenderSettings::color_palette() const {
  // @@protoc_insertion_point(field_list:ProtoTransport.RenderSettings.color_palette)
  return color_palette_;
}

// repeated string layers = 13;
inline int RenderSettings::layers_size() const {
  return layers_.size();
}
inline void RenderSettings::clear_layers() {
  layers_.Clear();
}
inline const ::std::string& RenderSettings::layers(int index) const {
  // @@protoc_insertion_point(field_get:ProtoTransport.RenderSettings.layers)
  return layers_.Get(index);
}
inline ::std::string* RenderSettings::mutable_layers(int index) {
  // @@protoc_insertion_point(field_mutable:ProtoTransport.RenderSettings.layers)
  return layers_.Mutable(index);
}
inline void RenderSettings::set_layers(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:ProtoTransport.RenderSettings.layers)
  layers_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void RenderSettings::set_layers(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:ProtoTransport.RenderSettings.layers)
  layers_.Mutable(index)->assign(std::move(value));
}
#endif
inline void RenderSettings::set_layers(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  layers_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ProtoTransport.RenderSettings.layers)
}
inline void RenderSettings::set_layers(int index, const char* value, size_t size) {
  layers_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ProtoTransport.RenderSettings.layers)
}
inline ::std::string* RenderSettings::add_layers() {
  // @@protoc_insertion_point(field_add_mutable:ProtoTransport.RenderSettings.layers)
  return layers_.Add();
}
inline void RenderSettings::add_layers(const ::std::string& value) {
  layers_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ProtoTransport.RenderSettings.layers)
}
#if LANG_CXX11
inline void RenderSettings::add_layers(::std::string&& value) {
  layers_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ProtoTransport.RenderSettings.layers)
}
#endif
inline void RenderSettings::add_layers(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  layers_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ProtoTransport.RenderSettings.layers)
}
inline void RenderSettings::add_layers(const char* value, size_t size) {
  layers_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ProtoTransport.RenderSettings.layers)
}
inline const ::google::protobuf::RepeatedPtrField<::std::string>&
RenderSettings::layers() const {
  // @@protoc_insertion_point(field_list:ProtoTransport.RenderSettings.layers)
  return layers_;
}
inline ::google::protobuf::RepeatedPtrField<::std::string>*
RenderSettings::mutable_layers() {
  // @@protoc_insertion_point(field_mutable_list:ProtoTransport.RenderSettings.layers)
  return &layers_;
}

// double outer_margin = 14;
inline void RenderSettings::clear_outer_margin() {
  outer_margin_ = 0;
}
inline double RenderSettings::outer_margin() const {
  // @@protoc_insertion_point(field_get:ProtoTransport.RenderSettings.outer_margin)
  return outer_margin_;
}
inline void RenderSettings::set_outer_margin(double value) {
  
  outer_margin_ = value;
  // @@protoc_insertion_point(field_set:ProtoTransport.RenderSettings.outer_margin)
}

// -------------------------------------------------------------------

// StopsCompressed

// string name = 1;
inline void StopsCompressed::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& StopsCompressed::name() const {
  // @@protoc_insertion_point(field_get:ProtoTransport.StopsCompressed.name)
  return name_.GetNoArena();
}
inline void StopsCompressed::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ProtoTransport.StopsCompressed.name)
}
#if LANG_CXX11
inline void StopsCompressed::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ProtoTransport.StopsCompressed.name)
}
#endif
inline void StopsCompressed::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ProtoTransport.StopsCompressed.name)
}
inline void StopsCompressed::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ProtoTransport.StopsCompressed.name)
}
inline ::std::string* StopsCompressed::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:ProtoTransport.StopsCompressed.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StopsCompressed::release_name() {
  // @@protoc_insertion_point(field_release:ProtoTransport.StopsCompressed.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StopsCompressed::set_allocated_name(::std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:ProtoTransport.StopsCompressed.name)
}

// double lat = 2;
inline void StopsCompressed::clear_lat() {
  lat_ = 0;
}
inline double StopsCompressed::lat() const {
  // @@protoc_insertion_point(field_get:ProtoTransport.StopsCompressed.lat)
  return lat_;
}
inline void StopsCompressed::set_lat(double value) {
  
  lat_ = value;
  // @@protoc_insertion_point(field_set:ProtoTransport.StopsCompressed.lat)
}

// double lon = 3;
inline void StopsCompressed::clear_lon() {
  lon_ = 0;
}
inline double StopsCompressed::lon() const {
  // @@protoc_insertion_point(field_get:ProtoTransport.StopsCompressed.lon)
  return lon_;
}
inline void StopsCompressed::set_lon(double value) {
  
  lon_ = value;
  // @@protoc_insertion_point(field_set:ProtoTransport.StopsCompressed.lon)
}

// -------------------------------------------------------------------

// Renderer

// repeated .ProtoTransport.StopsCompressed stops = 1;
inline int Renderer::stops_size() const {
  return stops_.size();
}
inline void Renderer::clear_stops() {
  stops_.Clear();
}
inline ::ProtoTransport::StopsCompressed* Renderer::mutable_stops(int index) {
  // @@protoc_insertion_point(field_mutable:ProtoTransport.Renderer.stops)
  return stops_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::ProtoTransport::StopsCompressed >*
Renderer::mutable_stops() {
  // @@protoc_insertion_point(field_mutable_list:ProtoTransport.Renderer.stops)
  return &stops_;
}
inline const ::ProtoTransport::StopsCompressed& Renderer::stops(int index) const {
  // @@protoc_insertion_point(field_get:ProtoTransport.Renderer.stops)
  return stops_.Get(index);
}
inline ::ProtoTransport::StopsCompressed* Renderer::add_stops() {
  // @@protoc_insertion_point(field_add:ProtoTransport.Renderer.stops)
  return stops_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ProtoTransport::StopsCompressed >&
Renderer::stops() const {
  // @@protoc_insertion_point(field_list:ProtoTransport.Renderer.stops)
  return stops_;
}

// .ProtoTransport.RenderSettings settings = 2;
inline bool Renderer::has_settings() const {
  return this != internal_default_instance() && settings_ != nullptr;
}
inline void Renderer::clear_settings() {
  if (GetArenaNoVirtual() == nullptr && settings_ != nullptr) {
    delete settings_;
  }
  settings_ = nullptr;
}
inline const ::ProtoTransport::RenderSettings& Renderer::settings() const {
  const ::ProtoTransport::RenderSettings* p = settings_;
  // @@protoc_insertion_point(field_get:ProtoTransport.Renderer.settings)
  return p != nullptr ? *p : *reinterpret_cast<const ::ProtoTransport::RenderSettings*>(
      &::ProtoTransport::_RenderSettings_default_instance_);
}
inline ::ProtoTransport::RenderSettings* Renderer::release_settings() {
  // @@protoc_insertion_point(field_release:ProtoTransport.Renderer.settings)
  
  ::ProtoTransport::RenderSettings* temp = settings_;
  settings_ = nullptr;
  return temp;
}
inline ::ProtoTransport::RenderSettings* Renderer::mutable_settings() {
  
  if (settings_ == nullptr) {
    auto* p = CreateMaybeMessage<::ProtoTransport::RenderSettings>(GetArenaNoVirtual());
    settings_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ProtoTransport.Renderer.settings)
  return settings_;
}
inline void Renderer::set_allocated_settings(::ProtoTransport::RenderSettings* settings) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete settings_;
  }
  if (settings) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      settings = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, settings, submessage_arena);
    }
    
  } else {
    
  }
  settings_ = settings;
  // @@protoc_insertion_point(field_set_allocated:ProtoTransport.Renderer.settings)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace ProtoTransport

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_renderer_2eproto
