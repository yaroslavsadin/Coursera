// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: person.proto

#ifndef PROTOBUF_INCLUDED_person_2eproto
#define PROTOBUF_INCLUDED_person_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "address.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_person_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_person_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_person_2eproto();
namespace Serialize {
class Person;
class PersonDefaultTypeInternal;
extern PersonDefaultTypeInternal _Person_default_instance_;
}  // namespace Serialize
namespace google {
namespace protobuf {
template<> ::Serialize::Person* Arena::CreateMaybeMessage<::Serialize::Person>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace Serialize {

// ===================================================================

class Person :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Serialize.Person) */ {
 public:
  Person();
  virtual ~Person();

  Person(const Person& from);

  inline Person& operator=(const Person& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Person(Person&& from) noexcept
    : Person() {
    *this = ::std::move(from);
  }

  inline Person& operator=(Person&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Person& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Person* internal_default_instance() {
    return reinterpret_cast<const Person*>(
               &_Person_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Person* other);
  friend void swap(Person& a, Person& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Person* New() const final {
    return CreateMaybeMessage<Person>(nullptr);
  }

  Person* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Person>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Person& from);
  void MergeFrom(const Person& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Person* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string phone_number = 4;
  int phone_number_size() const;
  void clear_phone_number();
  static const int kPhoneNumberFieldNumber = 4;
  const ::std::string& phone_number(int index) const;
  ::std::string* mutable_phone_number(int index);
  void set_phone_number(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_phone_number(int index, ::std::string&& value);
  #endif
  void set_phone_number(int index, const char* value);
  void set_phone_number(int index, const char* value, size_t size);
  ::std::string* add_phone_number();
  void add_phone_number(const ::std::string& value);
  #if LANG_CXX11
  void add_phone_number(::std::string&& value);
  #endif
  void add_phone_number(const char* value);
  void add_phone_number(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField<::std::string>& phone_number() const;
  ::google::protobuf::RepeatedPtrField<::std::string>* mutable_phone_number();

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // .Serialize.Address address = 3;
  bool has_address() const;
  void clear_address();
  static const int kAddressFieldNumber = 3;
  const ::Serialize::Address& address() const;
  ::Serialize::Address* release_address();
  ::Serialize::Address* mutable_address();
  void set_allocated_address(::Serialize::Address* address);

  // int32 age = 2;
  void clear_age();
  static const int kAgeFieldNumber = 2;
  ::google::protobuf::int32 age() const;
  void set_age(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Serialize.Person)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField<::std::string> phone_number_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::Serialize::Address* address_;
  ::google::protobuf::int32 age_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_person_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Person

// string name = 1;
inline void Person::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Person::name() const {
  // @@protoc_insertion_point(field_get:Serialize.Person.name)
  return name_.GetNoArena();
}
inline void Person::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Serialize.Person.name)
}
#if LANG_CXX11
inline void Person::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Serialize.Person.name)
}
#endif
inline void Person::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Serialize.Person.name)
}
inline void Person::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Serialize.Person.name)
}
inline ::std::string* Person::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:Serialize.Person.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Person::release_name() {
  // @@protoc_insertion_point(field_release:Serialize.Person.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Person::set_allocated_name(::std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:Serialize.Person.name)
}

// int32 age = 2;
inline void Person::clear_age() {
  age_ = 0;
}
inline ::google::protobuf::int32 Person::age() const {
  // @@protoc_insertion_point(field_get:Serialize.Person.age)
  return age_;
}
inline void Person::set_age(::google::protobuf::int32 value) {
  
  age_ = value;
  // @@protoc_insertion_point(field_set:Serialize.Person.age)
}

// .Serialize.Address address = 3;
inline bool Person::has_address() const {
  return this != internal_default_instance() && address_ != nullptr;
}
inline const ::Serialize::Address& Person::address() const {
  const ::Serialize::Address* p = address_;
  // @@protoc_insertion_point(field_get:Serialize.Person.address)
  return p != nullptr ? *p : *reinterpret_cast<const ::Serialize::Address*>(
      &::Serialize::_Address_default_instance_);
}
inline ::Serialize::Address* Person::release_address() {
  // @@protoc_insertion_point(field_release:Serialize.Person.address)
  
  ::Serialize::Address* temp = address_;
  address_ = nullptr;
  return temp;
}
inline ::Serialize::Address* Person::mutable_address() {
  
  if (address_ == nullptr) {
    auto* p = CreateMaybeMessage<::Serialize::Address>(GetArenaNoVirtual());
    address_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Serialize.Person.address)
  return address_;
}
inline void Person::set_allocated_address(::Serialize::Address* address) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(address_);
  }
  if (address) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      address = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, address, submessage_arena);
    }
    
  } else {
    
  }
  address_ = address;
  // @@protoc_insertion_point(field_set_allocated:Serialize.Person.address)
}

// repeated string phone_number = 4;
inline int Person::phone_number_size() const {
  return phone_number_.size();
}
inline void Person::clear_phone_number() {
  phone_number_.Clear();
}
inline const ::std::string& Person::phone_number(int index) const {
  // @@protoc_insertion_point(field_get:Serialize.Person.phone_number)
  return phone_number_.Get(index);
}
inline ::std::string* Person::mutable_phone_number(int index) {
  // @@protoc_insertion_point(field_mutable:Serialize.Person.phone_number)
  return phone_number_.Mutable(index);
}
inline void Person::set_phone_number(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:Serialize.Person.phone_number)
  phone_number_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void Person::set_phone_number(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:Serialize.Person.phone_number)
  phone_number_.Mutable(index)->assign(std::move(value));
}
#endif
inline void Person::set_phone_number(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  phone_number_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Serialize.Person.phone_number)
}
inline void Person::set_phone_number(int index, const char* value, size_t size) {
  phone_number_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Serialize.Person.phone_number)
}
inline ::std::string* Person::add_phone_number() {
  // @@protoc_insertion_point(field_add_mutable:Serialize.Person.phone_number)
  return phone_number_.Add();
}
inline void Person::add_phone_number(const ::std::string& value) {
  phone_number_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:Serialize.Person.phone_number)
}
#if LANG_CXX11
inline void Person::add_phone_number(::std::string&& value) {
  phone_number_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:Serialize.Person.phone_number)
}
#endif
inline void Person::add_phone_number(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  phone_number_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Serialize.Person.phone_number)
}
inline void Person::add_phone_number(const char* value, size_t size) {
  phone_number_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Serialize.Person.phone_number)
}
inline const ::google::protobuf::RepeatedPtrField<::std::string>&
Person::phone_number() const {
  // @@protoc_insertion_point(field_list:Serialize.Person.phone_number)
  return phone_number_;
}
inline ::google::protobuf::RepeatedPtrField<::std::string>*
Person::mutable_phone_number() {
  // @@protoc_insertion_point(field_mutable_list:Serialize.Person.phone_number)
  return &phone_number_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace Serialize

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_person_2eproto
