// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: working_time.proto

#ifndef PROTOBUF_INCLUDED_working_5ftime_2eproto
#define PROTOBUF_INCLUDED_working_5ftime_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_working_5ftime_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_working_5ftime_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_working_5ftime_2eproto();
namespace YellowPages {
class WorkingTime;
class WorkingTimeDefaultTypeInternal;
extern WorkingTimeDefaultTypeInternal _WorkingTime_default_instance_;
class WorkingTimeInterval;
class WorkingTimeIntervalDefaultTypeInternal;
extern WorkingTimeIntervalDefaultTypeInternal _WorkingTimeInterval_default_instance_;
}  // namespace YellowPages
namespace google {
namespace protobuf {
template<> ::YellowPages::WorkingTime* Arena::CreateMaybeMessage<::YellowPages::WorkingTime>(Arena*);
template<> ::YellowPages::WorkingTimeInterval* Arena::CreateMaybeMessage<::YellowPages::WorkingTimeInterval>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace YellowPages {

enum WorkingTimeInterval_Day {
  WorkingTimeInterval_Day_EVERYDAY = 0,
  WorkingTimeInterval_Day_MONDAY = 1,
  WorkingTimeInterval_Day_TUESDAY = 2,
  WorkingTimeInterval_Day_WEDNESDAY = 3,
  WorkingTimeInterval_Day_THURSDAY = 4,
  WorkingTimeInterval_Day_FRIDAY = 5,
  WorkingTimeInterval_Day_SATURDAY = 6,
  WorkingTimeInterval_Day_SUNDAY = 7,
  WorkingTimeInterval_Day_WorkingTimeInterval_Day_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::min(),
  WorkingTimeInterval_Day_WorkingTimeInterval_Day_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::max()
};
bool WorkingTimeInterval_Day_IsValid(int value);
const WorkingTimeInterval_Day WorkingTimeInterval_Day_Day_MIN = WorkingTimeInterval_Day_EVERYDAY;
const WorkingTimeInterval_Day WorkingTimeInterval_Day_Day_MAX = WorkingTimeInterval_Day_SUNDAY;
const int WorkingTimeInterval_Day_Day_ARRAYSIZE = WorkingTimeInterval_Day_Day_MAX + 1;

const ::google::protobuf::EnumDescriptor* WorkingTimeInterval_Day_descriptor();
inline const ::std::string& WorkingTimeInterval_Day_Name(WorkingTimeInterval_Day value) {
  return ::google::protobuf::internal::NameOfEnum(
    WorkingTimeInterval_Day_descriptor(), value);
}
inline bool WorkingTimeInterval_Day_Parse(
    const ::std::string& name, WorkingTimeInterval_Day* value) {
  return ::google::protobuf::internal::ParseNamedEnum<WorkingTimeInterval_Day>(
    WorkingTimeInterval_Day_descriptor(), name, value);
}
// ===================================================================

class WorkingTimeInterval :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:YellowPages.WorkingTimeInterval) */ {
 public:
  WorkingTimeInterval();
  virtual ~WorkingTimeInterval();

  WorkingTimeInterval(const WorkingTimeInterval& from);

  inline WorkingTimeInterval& operator=(const WorkingTimeInterval& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  WorkingTimeInterval(WorkingTimeInterval&& from) noexcept
    : WorkingTimeInterval() {
    *this = ::std::move(from);
  }

  inline WorkingTimeInterval& operator=(WorkingTimeInterval&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const WorkingTimeInterval& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WorkingTimeInterval* internal_default_instance() {
    return reinterpret_cast<const WorkingTimeInterval*>(
               &_WorkingTimeInterval_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(WorkingTimeInterval* other);
  friend void swap(WorkingTimeInterval& a, WorkingTimeInterval& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline WorkingTimeInterval* New() const final {
    return CreateMaybeMessage<WorkingTimeInterval>(nullptr);
  }

  WorkingTimeInterval* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<WorkingTimeInterval>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const WorkingTimeInterval& from);
  void MergeFrom(const WorkingTimeInterval& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WorkingTimeInterval* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef WorkingTimeInterval_Day Day;
  static const Day EVERYDAY =
    WorkingTimeInterval_Day_EVERYDAY;
  static const Day MONDAY =
    WorkingTimeInterval_Day_MONDAY;
  static const Day TUESDAY =
    WorkingTimeInterval_Day_TUESDAY;
  static const Day WEDNESDAY =
    WorkingTimeInterval_Day_WEDNESDAY;
  static const Day THURSDAY =
    WorkingTimeInterval_Day_THURSDAY;
  static const Day FRIDAY =
    WorkingTimeInterval_Day_FRIDAY;
  static const Day SATURDAY =
    WorkingTimeInterval_Day_SATURDAY;
  static const Day SUNDAY =
    WorkingTimeInterval_Day_SUNDAY;
  static inline bool Day_IsValid(int value) {
    return WorkingTimeInterval_Day_IsValid(value);
  }
  static const Day Day_MIN =
    WorkingTimeInterval_Day_Day_MIN;
  static const Day Day_MAX =
    WorkingTimeInterval_Day_Day_MAX;
  static const int Day_ARRAYSIZE =
    WorkingTimeInterval_Day_Day_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Day_descriptor() {
    return WorkingTimeInterval_Day_descriptor();
  }
  static inline const ::std::string& Day_Name(Day value) {
    return WorkingTimeInterval_Day_Name(value);
  }
  static inline bool Day_Parse(const ::std::string& name,
      Day* value) {
    return WorkingTimeInterval_Day_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // .YellowPages.WorkingTimeInterval.Day day = 1;
  void clear_day();
  static const int kDayFieldNumber = 1;
  ::YellowPages::WorkingTimeInterval_Day day() const;
  void set_day(::YellowPages::WorkingTimeInterval_Day value);

  // int32 minutes_from = 2;
  void clear_minutes_from();
  static const int kMinutesFromFieldNumber = 2;
  ::google::protobuf::int32 minutes_from() const;
  void set_minutes_from(::google::protobuf::int32 value);

  // int32 minutes_to = 3;
  void clear_minutes_to();
  static const int kMinutesToFieldNumber = 3;
  ::google::protobuf::int32 minutes_to() const;
  void set_minutes_to(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:YellowPages.WorkingTimeInterval)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  int day_;
  ::google::protobuf::int32 minutes_from_;
  ::google::protobuf::int32 minutes_to_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_working_5ftime_2eproto;
};
// -------------------------------------------------------------------

class WorkingTime :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:YellowPages.WorkingTime) */ {
 public:
  WorkingTime();
  virtual ~WorkingTime();

  WorkingTime(const WorkingTime& from);

  inline WorkingTime& operator=(const WorkingTime& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  WorkingTime(WorkingTime&& from) noexcept
    : WorkingTime() {
    *this = ::std::move(from);
  }

  inline WorkingTime& operator=(WorkingTime&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const WorkingTime& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WorkingTime* internal_default_instance() {
    return reinterpret_cast<const WorkingTime*>(
               &_WorkingTime_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(WorkingTime* other);
  friend void swap(WorkingTime& a, WorkingTime& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline WorkingTime* New() const final {
    return CreateMaybeMessage<WorkingTime>(nullptr);
  }

  WorkingTime* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<WorkingTime>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const WorkingTime& from);
  void MergeFrom(const WorkingTime& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WorkingTime* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .YellowPages.WorkingTimeInterval intervals = 2;
  int intervals_size() const;
  void clear_intervals();
  static const int kIntervalsFieldNumber = 2;
  ::YellowPages::WorkingTimeInterval* mutable_intervals(int index);
  ::google::protobuf::RepeatedPtrField< ::YellowPages::WorkingTimeInterval >*
      mutable_intervals();
  const ::YellowPages::WorkingTimeInterval& intervals(int index) const;
  ::YellowPages::WorkingTimeInterval* add_intervals();
  const ::google::protobuf::RepeatedPtrField< ::YellowPages::WorkingTimeInterval >&
      intervals() const;

  // string formatted = 1;
  void clear_formatted();
  static const int kFormattedFieldNumber = 1;
  const ::std::string& formatted() const;
  void set_formatted(const ::std::string& value);
  #if LANG_CXX11
  void set_formatted(::std::string&& value);
  #endif
  void set_formatted(const char* value);
  void set_formatted(const char* value, size_t size);
  ::std::string* mutable_formatted();
  ::std::string* release_formatted();
  void set_allocated_formatted(::std::string* formatted);

  // @@protoc_insertion_point(class_scope:YellowPages.WorkingTime)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::YellowPages::WorkingTimeInterval > intervals_;
  ::google::protobuf::internal::ArenaStringPtr formatted_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_working_5ftime_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// WorkingTimeInterval

// .YellowPages.WorkingTimeInterval.Day day = 1;
inline void WorkingTimeInterval::clear_day() {
  day_ = 0;
}
inline ::YellowPages::WorkingTimeInterval_Day WorkingTimeInterval::day() const {
  // @@protoc_insertion_point(field_get:YellowPages.WorkingTimeInterval.day)
  return static_cast< ::YellowPages::WorkingTimeInterval_Day >(day_);
}
inline void WorkingTimeInterval::set_day(::YellowPages::WorkingTimeInterval_Day value) {
  
  day_ = value;
  // @@protoc_insertion_point(field_set:YellowPages.WorkingTimeInterval.day)
}

// int32 minutes_from = 2;
inline void WorkingTimeInterval::clear_minutes_from() {
  minutes_from_ = 0;
}
inline ::google::protobuf::int32 WorkingTimeInterval::minutes_from() const {
  // @@protoc_insertion_point(field_get:YellowPages.WorkingTimeInterval.minutes_from)
  return minutes_from_;
}
inline void WorkingTimeInterval::set_minutes_from(::google::protobuf::int32 value) {
  
  minutes_from_ = value;
  // @@protoc_insertion_point(field_set:YellowPages.WorkingTimeInterval.minutes_from)
}

// int32 minutes_to = 3;
inline void WorkingTimeInterval::clear_minutes_to() {
  minutes_to_ = 0;
}
inline ::google::protobuf::int32 WorkingTimeInterval::minutes_to() const {
  // @@protoc_insertion_point(field_get:YellowPages.WorkingTimeInterval.minutes_to)
  return minutes_to_;
}
inline void WorkingTimeInterval::set_minutes_to(::google::protobuf::int32 value) {
  
  minutes_to_ = value;
  // @@protoc_insertion_point(field_set:YellowPages.WorkingTimeInterval.minutes_to)
}

// -------------------------------------------------------------------

// WorkingTime

// string formatted = 1;
inline void WorkingTime::clear_formatted() {
  formatted_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& WorkingTime::formatted() const {
  // @@protoc_insertion_point(field_get:YellowPages.WorkingTime.formatted)
  return formatted_.GetNoArena();
}
inline void WorkingTime::set_formatted(const ::std::string& value) {
  
  formatted_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YellowPages.WorkingTime.formatted)
}
#if LANG_CXX11
inline void WorkingTime::set_formatted(::std::string&& value) {
  
  formatted_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:YellowPages.WorkingTime.formatted)
}
#endif
inline void WorkingTime::set_formatted(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  formatted_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YellowPages.WorkingTime.formatted)
}
inline void WorkingTime::set_formatted(const char* value, size_t size) {
  
  formatted_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YellowPages.WorkingTime.formatted)
}
inline ::std::string* WorkingTime::mutable_formatted() {
  
  // @@protoc_insertion_point(field_mutable:YellowPages.WorkingTime.formatted)
  return formatted_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* WorkingTime::release_formatted() {
  // @@protoc_insertion_point(field_release:YellowPages.WorkingTime.formatted)
  
  return formatted_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void WorkingTime::set_allocated_formatted(::std::string* formatted) {
  if (formatted != nullptr) {
    
  } else {
    
  }
  formatted_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), formatted);
  // @@protoc_insertion_point(field_set_allocated:YellowPages.WorkingTime.formatted)
}

// repeated .YellowPages.WorkingTimeInterval intervals = 2;
inline int WorkingTime::intervals_size() const {
  return intervals_.size();
}
inline void WorkingTime::clear_intervals() {
  intervals_.Clear();
}
inline ::YellowPages::WorkingTimeInterval* WorkingTime::mutable_intervals(int index) {
  // @@protoc_insertion_point(field_mutable:YellowPages.WorkingTime.intervals)
  return intervals_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::YellowPages::WorkingTimeInterval >*
WorkingTime::mutable_intervals() {
  // @@protoc_insertion_point(field_mutable_list:YellowPages.WorkingTime.intervals)
  return &intervals_;
}
inline const ::YellowPages::WorkingTimeInterval& WorkingTime::intervals(int index) const {
  // @@protoc_insertion_point(field_get:YellowPages.WorkingTime.intervals)
  return intervals_.Get(index);
}
inline ::YellowPages::WorkingTimeInterval* WorkingTime::add_intervals() {
  // @@protoc_insertion_point(field_add:YellowPages.WorkingTime.intervals)
  return intervals_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::YellowPages::WorkingTimeInterval >&
WorkingTime::intervals() const {
  // @@protoc_insertion_point(field_list:YellowPages.WorkingTime.intervals)
  return intervals_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace YellowPages

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::YellowPages::WorkingTimeInterval_Day> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::YellowPages::WorkingTimeInterval_Day>() {
  return ::YellowPages::WorkingTimeInterval_Day_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_working_5ftime_2eproto
